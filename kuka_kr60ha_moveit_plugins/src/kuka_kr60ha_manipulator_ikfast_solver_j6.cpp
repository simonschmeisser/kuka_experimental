/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2016-01-25 15:50:17.350784
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[4]);
x1=IKcos(j[0]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=(x2*x3);
x5=(x1*x4);
x6=IKsin(j[1]);
x7=IKsin(j[2]);
x8=(x6*x7);
x9=((1.0)*x8);
x10=(x5+(((-1.0)*(1.0)*x1*x9)));
x11=IKsin(j[4]);
x12=IKsin(j[0]);
x13=IKsin(j[3]);
x14=(x12*x13);
x15=IKcos(j[3]);
x16=(x3*x6);
x17=((1.0)*x16);
x18=(x2*x7);
x19=((1.0)*x18);
x20=(x1*(((((-1.0)*(1.0)*x19))+(((-1.0)*(1.0)*x17)))));
x21=(x15*x20);
x22=IKcos(j[5]);
x23=((1.0)*x12);
x24=(((x13*x20))+(((-1.0)*(1.0)*x15*x23)));
x25=IKsin(j[5]);
x26=(x10*x11);
x27=(x0*(((((-1.0)*(1.0)*x14))+(((-1.0)*(1.0)*x21)))));
x28=((0.85)*x2);
x29=((0.82)*x6*x7);
x30=((0.145)*x1);
x31=((0.17)*x8);
x32=((0.17)*x4);
x33=(x12*x4);
x34=(x33+(((-1.0)*(1.0)*x23*x8)));
x35=(x1*x13);
x36=((1.0)*x35);
IkReal x49=((1.0)*x23);
x37=((((-1.0)*x18*x49))+(((-1.0)*x16*x49)));
x38=(x15*x37);
x39=(((x1*x15))+((x13*x37)));
x40=(x11*x34);
x41=(x0*((x36+(((-1.0)*(1.0)*x38)))));
x42=((0.145)*x12);
x43=((((-1.0)*(1.0)*x19))+(((-1.0)*(1.0)*x17)));
x44=(x11*x15);
x45=(x9+(((-1.0)*(1.0)*x4)));
x46=(x13*x45);
x47=(x11*x43);
x48=(x0*x15*(((((-1.0)*(1.0)*x9))+x4)));
eerot[0]=(((x0*x10))+((x11*((x14+x21)))));
eerot[1]=(((x25*(((((-1.0)*(1.0)*x27))+(((-1.0)*(1.0)*x26))))))+((x22*x24)));
eerot[2]=(((x22*((x27+x26))))+((x24*x25)));
IkReal x50=((1.0)*x1);
eetrans[0]=(((x11*(((((0.17)*x21))+(((0.17)*x14))))))+((x18*x30))+(((0.35)*x1))+(((0.82)*x5))+((x0*((((x1*x32))+(((-1.0)*x31*x50))))))+((x16*x30))+(((-1.0)*x29*x50))+((x1*x28)));
eerot[3]=(((x11*((x38+(((-1.0)*(1.0)*x36))))))+((x0*x34)));
eerot[4]=(((x22*x39))+((x25*(((((-1.0)*(1.0)*x40))+(((-1.0)*(1.0)*x41)))))));
eerot[5]=(((x22*((x40+x41))))+((x25*x39)));
IkReal x51=((1.0)*x12);
eetrans[1]=((((0.82)*x33))+((x18*x42))+((x11*(((((0.17)*x38))+(((-1.0)*(0.17)*x35))))))+(((0.35)*x12))+(((-1.0)*x29*x51))+((x16*x42))+((x12*x28))+((x0*((((x12*x32))+(((-1.0)*x31*x51)))))));
eerot[6]=(((x44*x45))+((x0*x43)));
eerot[7]=(((x25*(((((-1.0)*(1.0)*x48))+(((-1.0)*(1.0)*x47))))))+((x22*x46)));
eerot[8]=(((x22*((x48+x47))))+((x25*x46)));
eetrans[2]=((0.815)+(((0.145)*x4))+(((-1.0)*(0.85)*x6))+(((-1.0)*(0.82)*x18))+((x44*((x31+(((-1.0)*(1.0)*x32))))))+(((-1.0)*(0.82)*x16))+(((-1.0)*(0.145)*x8))+((x0*(((((-1.0)*(0.17)*x16))+(((-1.0)*(0.17)*x18)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*(((1.0)*r00)));
new_px=(px+(((-1.0)*(0.17)*r00)));
new_r10=r12;
new_r11=r11;
new_r12=((-1.0)*(((1.0)*r10)));
new_py=(py+(((-1.0)*(0.17)*r10)));
new_r20=r22;
new_r21=r21;
new_r22=((-1.0)*(((1.0)*r20)));
new_pz=((-0.815)+(((-1.0)*(0.17)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*py);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x54)));
rxp2_0=((((-1.0)*r22*x52))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x53))+((px*r22)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x56 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x56.valid){
continue;
}
IkReal x55=((-1.0)*(x56.value));
j0array[0]=x55;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x55);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.913676767405458)+(((-1.0)*(0.70640104173451)*pp))+(((0.494480729214157)*py*sj0))+(((0.494480729214157)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((0.913676767405458)+(((-1.0)*(0.70640104173451)*pp))+(((0.494480729214157)*py*sj0))+(((0.494480729214157)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x57=IKasin(((0.913676767405458)+(((-1.0)*(0.70640104173451)*pp))+(((0.494480729214157)*py*sj0))+(((0.494480729214157)*cj0*px))));
j2array[0]=((-1.39577630171373)+(((-1.0)*x57)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.74581635187607)+x57);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
IkReal x58=(cj2*pz);
IkReal x59=(pz*sj2);
IkReal x60=(cj0*cj2*px);
IkReal x61=(cj0*px*sj2);
IkReal x62=(cj2*py*sj0);
IkReal x63=(py*sj0*sj2);
j1eval[0]=((((-1.0)*(5.6551724137931)*sj2))+(((16.1576354679803)*x63))+(((-2.85714285714286)*x60))+(((-2.85714285714286)*x59))+(((-1.0)*(16.7487684729064)*pz))+cj2+(((-2.85714285714286)*x62))+(((16.1576354679803)*x61))+(((-16.1576354679803)*x58)));
j1eval[1]=IKsign(((((-1.0)*(0.287)*sj2))+(((-0.145)*x60))+(((0.82)*x61))+(((-0.145)*x62))+(((-0.82)*x58))+(((0.82)*x63))+(((-1.0)*(0.85)*pz))+(((0.05075)*cj2))+(((-0.145)*x59))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x64=(cj0*px);
IkReal x65=(cj2*pz);
IkReal x66=(py*sj0);
IkReal x67=(pz*sj2);
IkReal x68=(cj0*cj2*px);
IkReal x69=(cj0*px*sj2);
IkReal x70=(cj2*py*sj0);
IkReal x71=(py*sj0*sj2);
j1eval[0]=((-5.86206896551724)+(((-1.0)*(5.6551724137931)*cj2))+(((-1.0)*(1.0)*sj2))+(((-2.85714285714286)*x65))+(((16.1576354679803)*x70))+(((2.85714285714286)*x71))+(((16.1576354679803)*x68))+(((16.7487684729064)*x64))+(((16.1576354679803)*x67))+(((2.85714285714286)*x69))+(((16.7487684729064)*x66)));
j1eval[1]=IKsign(((-0.2975)+(((-1.0)*(0.287)*cj2))+(((0.82)*x67))+(((-1.0)*(0.05075)*sj2))+(((-0.145)*x65))+(((0.145)*x71))+(((0.85)*x64))+(((0.85)*x66))+(((0.82)*x68))+(((0.82)*x70))+(((0.145)*x69))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x72=(cj0*px);
IkReal x73=(py*sj0);
IkReal x74=py*py;
IkReal x75=((8.16326530612245)*x74);
IkReal x76=pz*pz;
IkReal x77=(cj0*px*py*sj0);
IkReal x78=cj0*cj0;
IkReal x79=(x78*(px*px));
j1eval[0]=((-1.0)+(((5.71428571428571)*x73))+(((5.71428571428571)*x72))+(((-1.0)*x75))+(((-8.16326530612245)*x79))+(((-16.3265306122449)*x77))+((x75*x78))+(((-8.16326530612245)*x76)));
j1eval[1]=IKsign(((-0.1225)+(((-1.0)*x79))+(((-1.0)*x76))+(((-1.0)*x74))+(((-2.0)*x77))+(((0.7)*x72))+((x74*x78))+(((0.7)*x73))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x80=(cj0*px);
IkReal x81=(py*sj0);
IkReal x82=py*py;
IkReal x83=cj0*cj0;
IkReal x84=(cj2*pz);
IkReal x85=(pz*sj2);
IkReal x86=(cj0*cj2*px);
IkReal x87=(cj0*px*sj2);
IkReal x88=(cj2*py*sj0);
IkReal x89=(py*sj0*sj2);
CheckValue<IkReal> x90 = IKatan2WithCheck(IkReal(((((0.85)*pz))+(((-1.0)*(0.287)*sj2))+(((0.82)*x87))+(((0.82)*x84))+(((-0.145)*x88))+(((0.05075)*cj2))+(((-0.145)*x86))+(((0.82)*x89))+(((0.145)*x85)))),((0.2975)+(((0.287)*cj2))+(((-0.85)*x80))+(((-0.145)*x87))+(((-0.145)*x84))+(((0.82)*x85))+(((-0.145)*x89))+(((-0.82)*x88))+(((0.05075)*sj2))+(((-0.85)*x81))+(((-0.82)*x86))),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
CheckValue<IkReal> x91=IKPowWithIntegerCheck(IKsign(((-0.1225)+(((0.7)*x81))+(((-1.0)*x83*(px*px)))+(((-1.0)*x82))+(((-1.0)*(1.0)*(pz*pz)))+(((-2.0)*cj0*px*x81))+((x82*x83))+(((0.7)*x80)))),-1);
if(!x91.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x90.value)+(((1.5707963267949)*(x91.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x92=((0.145)*cj2);
IkReal x93=((0.82)*sj2);
IkReal x94=IKcos(j1);
IkReal x95=IKsin(j1);
IkReal x96=(cj0*px);
IkReal x97=(py*sj0);
IkReal x98=((0.82)*cj2);
IkReal x99=((0.145)*sj2);
IkReal x100=(pz*x95);
IkReal x101=((1.0)*x96);
IkReal x102=((1.0)*x97);
IkReal x103=((1.7)*x94);
evalcond[0]=(x93+((x95*x96))+(((-1.0)*x92))+((pz*x94))+((x95*x97))+(((-0.35)*x95)));
evalcond[1]=((((0.85)*x95))+pz+((x95*x99))+((x93*x94))+(((-1.0)*x92*x94))+((x95*x98)));
evalcond[2]=((0.85)+x100+(((-1.0)*x102*x94))+x98+x99+(((0.35)*x94))+(((-1.0)*x101*x94)));
evalcond[3]=((-0.151575)+(((-1.7)*x100))+(((0.7)*x97))+((x103*x96))+((x103*x97))+(((0.7)*x96))+(((-1.0)*(1.0)*pp))+(((-0.595)*x94)));
evalcond[4]=((0.35)+((x94*x99))+((x92*x95))+((x94*x98))+(((-1.0)*x101))+(((-1.0)*x102))+(((-1.0)*x93*x95))+(((0.85)*x94)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x485=(cj0*px);
IkReal x486=(py*sj0);
IkReal x487=((0.82)*cj2);
IkReal x488=((0.145)*sj2);
IkReal x489=(cj2*sj2);
IkReal x490=cj2*cj2;
IkReal x491=((1.0)*pz);
CheckValue<IkReal> x492 = IKatan2WithCheck(IkReal(((-0.1189)+(((-1.0)*x486*x491))+(((0.2378)*x490))+(((-1.0)*x485*x491))+(((-1.0)*(0.697)*sj2))+(((0.35)*pz))+(((0.12325)*cj2))+(((-0.651375)*x489)))),((0.743525)+(((1.394)*cj2))+(((0.651375)*x490))+(((0.2465)*sj2))+(((-1.0)*(1.0)*(pz*pz)))+(((0.2378)*x489))),IKFAST_ATAN2_MAGTHRESH);
if(!x492.valid){
continue;
}
CheckValue<IkReal> x493=IKPowWithIntegerCheck(IKsign(((-0.2975)+(((-1.0)*(0.287)*cj2))+(((-1.0)*(0.145)*cj2*pz))+(((0.85)*x485))+(((-1.0)*(0.05075)*sj2))+(((0.82)*pz*sj2))+(((0.85)*x486))+((x486*x487))+((x486*x488))+((x485*x487))+((x485*x488)))),-1);
if(!x493.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x492.value)+(((1.5707963267949)*(x493.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x494=((0.145)*cj2);
IkReal x495=((0.82)*sj2);
IkReal x496=IKcos(j1);
IkReal x497=IKsin(j1);
IkReal x498=(cj0*px);
IkReal x499=(py*sj0);
IkReal x500=((0.82)*cj2);
IkReal x501=((0.145)*sj2);
IkReal x502=(pz*x497);
IkReal x503=((1.0)*x498);
IkReal x504=((1.0)*x499);
IkReal x505=((1.7)*x496);
evalcond[0]=(((pz*x496))+((x497*x498))+(((-1.0)*x494))+((x497*x499))+(((-0.35)*x497))+x495);
evalcond[1]=(((x497*x500))+(((-1.0)*x494*x496))+pz+((x495*x496))+((x497*x501))+(((0.85)*x497)));
evalcond[2]=((0.85)+x501+x502+x500+(((-1.0)*x496*x503))+(((-1.0)*x496*x504))+(((0.35)*x496)));
evalcond[3]=((-0.151575)+(((-1.7)*x502))+((x498*x505))+(((0.7)*x498))+(((-0.595)*x496))+(((0.7)*x499))+((x499*x505))+(((-1.0)*(1.0)*pp)));
evalcond[4]=((0.35)+(((-1.0)*x503))+((x496*x500))+(((0.85)*x496))+((x494*x497))+(((-1.0)*x495*x497))+(((-1.0)*x504))+((x496*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x506=((0.145)*cj2);
IkReal x507=(cj0*px);
IkReal x508=((0.82)*sj2);
IkReal x509=(py*sj0);
IkReal x510=(cj2*sj2);
IkReal x511=cj2*cj2;
IkReal x512=((1.0)*pz);
CheckValue<IkReal> x513 = IKatan2WithCheck(IkReal(((-0.6724)+(((0.651375)*x511))+(pz*pz)+(((0.2378)*x510)))),((0.1189)+(((0.697)*sj2))+(((-1.0)*x509*x512))+(((0.651375)*x510))+(((-1.0)*(0.12325)*cj2))+(((-1.0)*x507*x512))+(((-0.2378)*x511))+(((0.35)*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
CheckValue<IkReal> x514=IKPowWithIntegerCheck(IKsign(((((-1.0)*(0.145)*pz*sj2))+(((-1.0)*(0.82)*cj2*pz))+(((-1.0)*(0.287)*sj2))+((x507*x508))+(((-1.0)*x506*x507))+((x508*x509))+(((-1.0)*(0.85)*pz))+(((0.05075)*cj2))+(((-1.0)*x506*x509)))),-1);
if(!x514.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x513.value)+(((1.5707963267949)*(x514.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x515=((0.145)*cj2);
IkReal x516=((0.82)*sj2);
IkReal x517=IKcos(j1);
IkReal x518=IKsin(j1);
IkReal x519=(cj0*px);
IkReal x520=(py*sj0);
IkReal x521=((0.82)*cj2);
IkReal x522=((0.145)*sj2);
IkReal x523=(pz*x518);
IkReal x524=((1.0)*x519);
IkReal x525=((1.0)*x520);
IkReal x526=((1.7)*x517);
evalcond[0]=(((x518*x519))+((pz*x517))+(((-0.35)*x518))+((x518*x520))+(((-1.0)*x515))+x516);
evalcond[1]=((((0.85)*x518))+(((-1.0)*x515*x517))+pz+((x516*x517))+((x518*x522))+((x518*x521)));
evalcond[2]=((0.85)+(((-1.0)*x517*x524))+(((0.35)*x517))+(((-1.0)*x517*x525))+x522+x521+x523);
evalcond[3]=((-0.151575)+((x520*x526))+(((0.7)*x519))+((x519*x526))+(((-0.595)*x517))+(((-1.7)*x523))+(((-1.0)*(1.0)*pp))+(((0.7)*x520)));
evalcond[4]=((0.35)+((x515*x518))+(((0.85)*x517))+(((-1.0)*x516*x518))+(((-1.0)*x525))+((x517*x521))+(((-1.0)*x524))+((x517*x522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x104=(cj1*cj2);
IkReal x105=(sj1*sj2);
IkReal x106=(x104+(((-1.0)*x105)));
IkReal x107=(((cj1*sj2))+((cj2*sj1)));
IkReal x108=(cj0*x107);
IkReal x109=(sj0*x107);
IkReal x110=((1.0)*sj0);
IkReal x111=(x105+(((-1.0)*x104)));
IkReal x112=(cj0*x111);
IkReal x113=(sj0*x111);
new_r00=(((r00*x108))+((r20*x106))+((r10*x109)));
new_r01=(((r01*x108))+((r21*x106))+((r11*x109)));
new_r02=(((r12*x109))+((r02*x108))+((r22*x106)));
new_r10=((((-1.0)*r00*x110))+((cj0*r10)));
new_r11=((((-1.0)*r01*x110))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x110)));
new_r20=(((r20*x107))+((r00*x112))+((r10*x113)));
new_r21=(((r01*x112))+((r21*x107))+((r11*x113)));
new_r22=(((r22*x107))+((r02*x112))+((r12*x113)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
IkReal x114=(cj1*cj2);
IkReal x115=(sj1*sj2);
IkReal x116=((((-1.0)*x115))+x114);
IkReal x117=x107;
IkReal x118=(cj0*x117);
IkReal x119=(sj0*x117);
IkReal x120=((1.0)*sj0);
IkReal x121=((((-1.0)*x114))+x115);
IkReal x122=(cj0*x121);
IkReal x123=(sj0*x121);
new_r00=(((r00*x118))+((r20*x116))+((r10*x119)));
new_r01=(((r01*x118))+((r21*x116))+((r11*x119)));
new_r02=(((r02*x118))+((r12*x119))+((r22*x116)));
new_r10=((((-1.0)*r00*x120))+((cj0*r10)));
new_r11=((((-1.0)*r01*x120))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x120)));
new_r20=(((r00*x122))+((r10*x123))+((r20*x117)));
new_r21=(((r11*x123))+((r21*x117))+((r01*x122)));
new_r22=(((r22*x117))+((r12*x123))+((r02*x122)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x124=(cj1*cj2);
IkReal x125=(sj1*sj2);
IkReal x126=(x124+(((-1.0)*x125)));
IkReal x127=x107;
IkReal x128=(cj0*x127);
IkReal x129=(sj0*x127);
IkReal x130=((1.0)*sj0);
IkReal x131=(x125+(((-1.0)*x124)));
IkReal x132=(cj0*x131);
IkReal x133=(sj0*x131);
new_r00=(((r10*x129))+((r20*x126))+((r00*x128)));
new_r01=(((r11*x129))+((r21*x126))+((r01*x128)));
new_r02=(((r02*x128))+((r12*x129))+((r22*x126)));
new_r10=((((-1.0)*r00*x130))+((cj0*r10)));
new_r11=((((-1.0)*r01*x130))+((cj0*r11)));
new_r12=((((-1.0)*r02*x130))+((cj0*r12)));
new_r20=(((r10*x133))+((r00*x132))+((r20*x127)));
new_r21=(((r21*x127))+((r11*x133))+((r01*x132)));
new_r22=(((r02*x132))+((r12*x133))+((r22*x127)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x135 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x135.valid){
continue;
}
IkReal x134=((-1.0)*(((1.0)*(x135.value))));
j3array[0]=x134;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x134);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x136=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x136))+(((-1.0)*(1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x136))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x136))+(((-1.0)*(1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x136))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x136))+(((-1.0)*(1.0)*new_r00*sj3))), ((((-1.0)*sj3*x136))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x137=IKsin(j5);
IkReal x138=(cj3*x137);
IkReal x139=IKcos(j5);
IkReal x140=((1.0)*x139);
IkReal x141=((-1.0)*x140);
IkReal x142=((1.0)*sj3);
IkReal x143=((((-1.0)*cj3*x140))+((sj3*x137)));
evalcond[0]=(x137+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=(x138+new_r01+((sj3*x139)));
evalcond[2]=(((new_r10*sj3))+x141+((cj3*new_r00)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x142))+(((-1.0)*x137)));
evalcond[4]=(((cj3*new_r11))+x141+(((-1.0)*new_r01*x142)));
evalcond[5]=(x143+new_r00);
evalcond[6]=(x143+new_r11);
evalcond[7]=((((-1.0)*x139*x142))+new_r10+(((-1.0)*x138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x145 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x145.valid){
continue;
}
IkReal x144=((-1.0)*(((1.0)*(x145.value))));
j3array[0]=x144;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x144);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x146=((1.0)*new_r00);
if( IKabs((((cj3*new_r01))+(((-1.0)*sj3*x146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x146))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*sj3*x146))))+IKsqr(((((-1.0)*cj3*x146))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*sj3*x146))), ((((-1.0)*cj3*x146))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x147=IKcos(j5);
IkReal x148=IKsin(j5);
IkReal x149=((1.0)*x148);
IkReal x150=((-1.0)*x149);
IkReal x151=(cj3*x147);
IkReal x152=((1.0)*sj3);
IkReal x153=((((-1.0)*cj3*x149))+((sj3*x147)));
evalcond[0]=(((new_r10*sj3))+x147+((cj3*new_r00)));
evalcond[1]=(x150+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(x151+((sj3*x148))+new_r00);
evalcond[3]=(((cj3*new_r10))+x150+(((-1.0)*new_r00*x152)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x147))+(((-1.0)*new_r01*x152)));
evalcond[5]=(x153+new_r01);
evalcond[6]=(x153+new_r10);
evalcond[7]=((((-1.0)*x151))+(((-1.0)*x148*x152))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x155=IKPowWithIntegerCheck(sj4,-1);
if(!x155.valid){
continue;
}
IkReal x154=x155.value;
CheckValue<IkReal> x156=IKPowWithIntegerCheck(new_r12,-1);
if(!x156.valid){
continue;
}
if( IKabs((x154*(x156.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x154)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x154*(x156.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4)))))))+IKsqr((new_r02*x154))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x154*(x156.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4)))))), (new_r02*x154));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x157=IKcos(j3);
IkReal x158=((1.0)*sj4);
IkReal x159=(x157*x158);
IkReal x160=IKsin(j3);
IkReal x161=(x158*x160);
IkReal x162=(new_r02*x157);
IkReal x163=(new_r12*x160);
IkReal x164=((1.0)*cj4);
evalcond[0]=((((-1.0)*x159))+new_r02);
evalcond[1]=((((-1.0)*x161))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x160))+((new_r12*x157)));
evalcond[3]=((((-1.0)*x158))+x163+x162);
evalcond[4]=(((new_r22*sj4))+(((-1.0)*x162*x164))+(((-1.0)*x163*x164)));
evalcond[5]=((((-1.0)*new_r10*x161))+(((-1.0)*new_r20*x164))+(((-1.0)*new_r00*x159)));
evalcond[6]=((((-1.0)*new_r11*x161))+(((-1.0)*new_r21*x164))+(((-1.0)*new_r01*x159)));
evalcond[7]=((1.0)+(((-1.0)*x158*x163))+(((-1.0)*new_r22*x164))+(((-1.0)*x158*x162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x165=(cj1*cj2);
IkReal x166=(sj1*sj2);
IkReal x167=(x165+(((-1.0)*x166)));
IkReal x168=x107;
IkReal x169=(cj0*x168);
IkReal x170=(sj0*x168);
IkReal x171=((1.0)*sj0);
IkReal x172=((((-1.0)*x165))+x166);
IkReal x173=(cj0*x172);
IkReal x174=(sj0*x172);
new_r00=(((r00*x169))+((r10*x170))+((r20*x167)));
new_r01=(((r21*x167))+((r01*x169))+((r11*x170)));
new_r02=(((r02*x169))+((r12*x170))+((r22*x167)));
new_r10=((((-1.0)*r00*x171))+((cj0*r10)));
new_r11=((((-1.0)*r01*x171))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x171)));
new_r20=(((r20*x168))+((r10*x174))+((r00*x173)));
new_r21=(((r01*x173))+((r11*x174))+((r21*x168)));
new_r22=(((r12*x174))+((r02*x173))+((r22*x168)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x175=(cj1*cj2);
IkReal x176=(sj1*sj2);
IkReal x177=((((-1.0)*x176))+x175);
IkReal x178=x107;
IkReal x179=(cj0*x178);
IkReal x180=(sj0*x178);
IkReal x181=((1.0)*sj0);
IkReal x182=((((-1.0)*x175))+x176);
IkReal x183=(cj0*x182);
IkReal x184=(sj0*x182);
new_r00=(((r10*x180))+((r20*x177))+((r00*x179)));
new_r01=(((r21*x177))+((r11*x180))+((r01*x179)));
new_r02=(((r22*x177))+((r02*x179))+((r12*x180)));
new_r10=((((-1.0)*r00*x181))+((cj0*r10)));
new_r11=((((-1.0)*r01*x181))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x181)));
new_r20=(((r10*x184))+((r20*x178))+((r00*x183)));
new_r21=(((r01*x183))+((r11*x184))+((r21*x178)));
new_r22=(((r22*x178))+((r02*x183))+((r12*x184)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x185=(cj1*cj2);
IkReal x186=(sj1*sj2);
IkReal x187=((((-1.0)*x186))+x185);
IkReal x188=x107;
IkReal x189=(cj0*x188);
IkReal x190=(sj0*x188);
IkReal x191=((1.0)*sj0);
IkReal x192=((((-1.0)*x185))+x186);
IkReal x193=(cj0*x192);
IkReal x194=(sj0*x192);
new_r00=(((r20*x187))+((r00*x189))+((r10*x190)));
new_r01=(((r11*x190))+((r01*x189))+((r21*x187)));
new_r02=(((r22*x187))+((r12*x190))+((r02*x189)));
new_r10=((((-1.0)*r00*x191))+((cj0*r10)));
new_r11=((((-1.0)*r01*x191))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x191)));
new_r20=(((r00*x193))+((r20*x188))+((r10*x194)));
new_r21=(((r21*x188))+((r01*x193))+((r11*x194)));
new_r22=(((r22*x188))+((r12*x194))+((r02*x193)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x195=((1.0)*cj4);
IkReal x196=((((-1.0)*x195))+new_r22);
IkReal x197=((1.0)*sj4);
IkReal x198=((((-1.0)*x197))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x196;
evalcond[2]=x196;
evalcond[3]=new_r02;
evalcond[4]=x198;
evalcond[5]=x198;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r12*x195)));
evalcond[7]=((((-1.0)*new_r20*x195))+(((-1.0)*new_r10*x197)));
evalcond[8]=((((-1.0)*new_r21*x195))+(((-1.0)*new_r11*x197)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x197))+(((-1.0)*new_r22*x195)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x199=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x199.valid){
continue;
}
CheckValue<IkReal> x200 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x200.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x199.value)))+(x200.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x201=IKcos(j5);
IkReal x202=IKsin(j5);
IkReal x203=((1.0)*x202);
IkReal x204=((1.0)*new_r22);
IkReal x205=((-1.0)*x203);
evalcond[0]=(((new_r12*x201))+new_r20);
evalcond[1]=(((new_r22*x202))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x203))+new_r21);
evalcond[3]=((((-1.0)*x201*x204))+new_r10);
evalcond[4]=((((-1.0)*(1.0)*new_r00))+x205);
evalcond[5]=((((-1.0)*x201))+(((-1.0)*(1.0)*new_r01)));
evalcond[6]=(((new_r12*new_r20))+(((-1.0)*new_r10*x204))+x201);
evalcond[7]=(((new_r12*new_r21))+x205+(((-1.0)*new_r11*x204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x206=((1.0)*cj4);
IkReal x207=((((-1.0)*x206))+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x207;
evalcond[2]=x207;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*(1.0)*new_r12))+(((-1.0)*(1.0)*sj4)));
evalcond[6]=(((new_r22*sj4))+((cj4*new_r12)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x206)));
evalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x206)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x206))+((new_r12*sj4)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x208=IKsin(j5);
IkReal x209=((-1.0)*x208);
IkReal x210=IKcos(j5);
IkReal x211=((1.0)*x210);
IkReal x212=((1.0)*new_r12);
evalcond[0]=(new_r21+((new_r12*x208)));
evalcond[1]=(x209+new_r00);
evalcond[2]=(new_r01+(((-1.0)*x211)));
evalcond[3]=((((-1.0)*x210*x212))+new_r20);
evalcond[4]=(((new_r22*x208))+(((-1.0)*(1.0)*new_r11)));
evalcond[5]=((((-1.0)*(1.0)*new_r10))+(((-1.0)*new_r22*x211)));
evalcond[6]=((((-1.0)*new_r20*x212))+((new_r10*new_r22))+x210);
evalcond[7]=(((new_r11*new_r22))+(((-1.0)*new_r21*x212))+x209);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x213=((1.0)*cj3);
IkReal x214=((1.0)*sj3);
IkReal x215=((((-1.0)*new_r02*x214))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x213))+new_r02);
evalcond[3]=((((-1.0)*x214))+new_r12);
evalcond[4]=x215;
evalcond[5]=x215;
evalcond[6]=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[7]=(((new_r11*sj3))+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x213))+(((-1.0)*new_r10*x214)));
evalcond[10]=((((-1.0)*new_r11*x214))+(((-1.0)*new_r01*x213)));
evalcond[11]=((1.0)+(((-1.0)*new_r12*x214))+(((-1.0)*new_r02*x213)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x216=IKcos(j5);
IkReal x217=IKsin(j5);
IkReal x218=((1.0)*x217);
IkReal x219=((-1.0)*x218);
IkReal x220=((1.0)*x216);
IkReal x221=((1.0)*new_r12);
evalcond[0]=(x216+new_r20);
evalcond[1]=(x219+new_r21);
evalcond[2]=(((new_r12*x216))+new_r01);
evalcond[3]=(((new_r12*x217))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x220))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x218))+new_r10);
evalcond[6]=(x219+(((-1.0)*new_r00*x221))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x220))+((new_r02*new_r11))+(((-1.0)*new_r01*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x222=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x223=((1.0)+((new_r12*sj3))+((cj3*new_r02)));
IkReal x224=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x225=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x222;
evalcond[5]=x222;
evalcond[6]=x223;
evalcond[7]=x224;
evalcond[8]=x225;
evalcond[9]=x225;
evalcond[10]=x224;
evalcond[11]=x223;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x226=IKsin(j5);
IkReal x227=IKcos(j5);
IkReal x228=((1.0)*x227);
IkReal x229=((-1.0)*x228);
IkReal x230=((1.0)*x226);
IkReal x231=((1.0)*new_r02);
evalcond[0]=(x226+new_r21);
evalcond[1]=(x229+new_r20);
evalcond[2]=(new_r11+((new_r02*x227)));
evalcond[3]=(((new_r02*x226))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x228))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x230))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*x230))+(((-1.0)*new_r10*x231)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x231))+x229);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x232=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x233=(cj3*new_r02);
IkReal x234=(new_r12*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x232;
evalcond[7]=x232;
evalcond[8]=(x234+x233);
evalcond[9]=((((-1.0)*x233))+(((-1.0)*x234)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x235=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x235))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x235))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x235))), (((cj3*new_r00))+(((-1.0)*sj3*x235))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x236=IKsin(j5);
IkReal x237=(cj3*x236);
IkReal x238=IKcos(j5);
IkReal x239=((1.0)*x238);
IkReal x240=((-1.0)*x239);
IkReal x241=((1.0)*sj3);
IkReal x242=((((-1.0)*cj3*x239))+((sj3*x236)));
evalcond[0]=(((new_r11*sj3))+((cj3*new_r01))+x236);
evalcond[1]=(((sj3*x238))+new_r01+x237);
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+x240);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x241))+(((-1.0)*x236)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x241))+x240);
evalcond[5]=(x242+new_r00);
evalcond[6]=(x242+new_r11);
evalcond[7]=((((-1.0)*x237))+new_r10+(((-1.0)*x238*x241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x243=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x244=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x243;
evalcond[7]=x243;
evalcond[8]=x244;
evalcond[9]=x244;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x245=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj3*x245))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x245))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj3*x245))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*x245))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj3*x245))+((cj3*new_r01))), ((((-1.0)*cj3*x245))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x246=IKcos(j5);
IkReal x247=IKsin(j5);
IkReal x248=((1.0)*x247);
IkReal x249=((-1.0)*x248);
IkReal x250=(cj3*x246);
IkReal x251=((1.0)*sj3);
IkReal x252=(((sj3*x246))+(((-1.0)*cj3*x248)));
evalcond[0]=(((new_r10*sj3))+((cj3*new_r00))+x246);
evalcond[1]=(((new_r11*sj3))+x249+((cj3*new_r01)));
evalcond[2]=(x250+new_r00+((sj3*x247)));
evalcond[3]=(((cj3*new_r10))+x249+(((-1.0)*new_r00*x251)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x251))+(((-1.0)*x246)));
evalcond[5]=(x252+new_r01);
evalcond[6]=(x252+new_r10);
evalcond[7]=((((-1.0)*x247*x251))+(((-1.0)*x250))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x253=((1.0)*cj4);
IkReal x254=((((-1.0)*x253))+new_r22);
IkReal x255=((1.0)*sj4);
IkReal x256=((((-1.0)*x255))+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x254;
evalcond[2]=x254;
evalcond[3]=x256;
evalcond[4]=new_r12;
evalcond[5]=x256;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x253)));
evalcond[7]=((((-1.0)*new_r20*x253))+(((-1.0)*new_r00*x255)));
evalcond[8]=((((-1.0)*new_r01*x255))+(((-1.0)*new_r21*x253)));
evalcond[9]=((1.0)+(((-1.0)*new_r02*x255))+(((-1.0)*new_r22*x253)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x257=IKcos(j5);
IkReal x258=IKsin(j5);
IkReal x259=((1.0)*x258);
IkReal x260=((-1.0)*x259);
IkReal x261=((1.0)*new_r22);
evalcond[0]=(((new_r02*x257))+new_r20);
evalcond[1]=(x260+new_r10);
evalcond[2]=((((-1.0)*x257))+new_r11);
evalcond[3]=(new_r01+((new_r22*x258)));
evalcond[4]=((((-1.0)*new_r02*x259))+new_r21);
evalcond[5]=((((-1.0)*x257*x261))+new_r00);
evalcond[6]=(((new_r02*new_r20))+(((-1.0)*new_r00*x261))+x257);
evalcond[7]=(((new_r02*new_r21))+x260+(((-1.0)*new_r01*x261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x262=((1.0)*cj4);
IkReal x263=((((-1.0)*x262))+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x263;
evalcond[2]=x263;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*(1.0)*sj4))+(((-1.0)*(1.0)*new_r02)));
evalcond[6]=(((new_r22*sj4))+((cj4*new_r02)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x262)));
evalcond[8]=((((-1.0)*new_r21*x262))+((new_r01*sj4)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x262)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x264 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x264.valid){
continue;
}
CheckValue<IkReal> x265=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x265.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x264.value)+(((1.5707963267949)*(x265.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x266=IKsin(j5);
IkReal x267=IKcos(j5);
IkReal x268=((1.0)*new_r02);
IkReal x269=((-1.0)*x266);
IkReal x270=((1.0)*x267);
evalcond[0]=(((new_r02*x266))+new_r21);
evalcond[1]=((((-1.0)*x267*x268))+new_r20);
evalcond[2]=(x269+(((-1.0)*(1.0)*new_r10)));
evalcond[3]=((((-1.0)*x270))+(((-1.0)*(1.0)*new_r11)));
evalcond[4]=((((-1.0)*(1.0)*new_r01))+((new_r22*x266)));
evalcond[5]=((((-1.0)*new_r22*x270))+(((-1.0)*(1.0)*new_r00)));
evalcond[6]=(x267+((new_r00*new_r22))+(((-1.0)*new_r20*x268)));
evalcond[7]=(x269+((new_r01*new_r22))+(((-1.0)*new_r21*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x272=IKPowWithIntegerCheck(sj4,-1);
if(!x272.valid){
continue;
}
IkReal x271=x272.value;
CheckValue<IkReal> x273=IKPowWithIntegerCheck(cj3,-1);
if(!x273.valid){
continue;
}
CheckValue<IkReal> x274=IKPowWithIntegerCheck(cj4,-1);
if(!x274.valid){
continue;
}
if( IKabs((x271*(x273.value)*(x274.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x271)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x271*(x273.value)*(x274.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x271))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x271*(x273.value)*(x274.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))), ((-1.0)*new_r20*x271));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x275=IKcos(j5);
IkReal x276=IKsin(j5);
IkReal x277=((1.0)*x276);
IkReal x278=(cj3*new_r01);
IkReal x279=(new_r11*sj3);
IkReal x280=(cj4*x276);
IkReal x281=((1.0)*sj3);
IkReal x282=((-1.0)*x277);
IkReal x283=((1.0)*x275);
IkReal x284=(cj3*new_r00);
IkReal x285=(new_r10*sj3);
IkReal x286=(cj3*x283);
IkReal x287=((1.0)*cj4);
evalcond[0]=(((sj4*x275))+new_r20);
evalcond[1]=((((-1.0)*sj4*x277))+new_r21);
evalcond[2]=(x279+x278+x280);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x281))+x282);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x283))+(((-1.0)*new_r01*x281)));
evalcond[5]=(((cj3*x280))+((sj3*x275))+new_r01);
evalcond[6]=((((-1.0)*cj4*x283))+x285+x284);
evalcond[7]=(((sj3*x276))+(((-1.0)*cj4*x286))+new_r00);
evalcond[8]=((((-1.0)*x286))+((sj3*x280))+new_r11);
evalcond[9]=((((-1.0)*cj4*x275*x281))+(((-1.0)*cj3*x277))+new_r10);
evalcond[10]=((((-1.0)*x284*x287))+(((-1.0)*x285*x287))+x275+((new_r20*sj4)));
evalcond[11]=((((-1.0)*x279*x287))+(((-1.0)*x278*x287))+x282+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x290=IKPowWithIntegerCheck(sj4,-1);
if(!x290.valid){
continue;
}
IkReal x288=x290.value;
IkReal x289=((1.0)*new_r20);
CheckValue<IkReal> x291=IKPowWithIntegerCheck(sj3,-1);
if(!x291.valid){
continue;
}
if( IKabs((x288*(x291.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x289)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x288*x289)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x288*(x291.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x289))))))+IKsqr(((-1.0)*x288*x289))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x288*(x291.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x289))))), ((-1.0)*x288*x289));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x292=IKcos(j5);
IkReal x293=IKsin(j5);
IkReal x294=((1.0)*x293);
IkReal x295=(cj3*new_r01);
IkReal x296=(new_r11*sj3);
IkReal x297=(cj4*x293);
IkReal x298=((1.0)*sj3);
IkReal x299=((-1.0)*x294);
IkReal x300=((1.0)*x292);
IkReal x301=(cj3*new_r00);
IkReal x302=(new_r10*sj3);
IkReal x303=(cj3*x300);
IkReal x304=((1.0)*cj4);
evalcond[0]=(((sj4*x292))+new_r20);
evalcond[1]=((((-1.0)*sj4*x294))+new_r21);
evalcond[2]=(x297+x295+x296);
evalcond[3]=(((cj3*new_r10))+x299+(((-1.0)*new_r00*x298)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x300))+(((-1.0)*new_r01*x298)));
evalcond[5]=(((sj3*x292))+((cj3*x297))+new_r01);
evalcond[6]=((((-1.0)*cj4*x300))+x301+x302);
evalcond[7]=((((-1.0)*cj4*x303))+((sj3*x293))+new_r00);
evalcond[8]=(new_r11+((sj3*x297))+(((-1.0)*x303)));
evalcond[9]=((((-1.0)*cj3*x294))+new_r10+(((-1.0)*cj4*x292*x298)));
evalcond[10]=(x292+(((-1.0)*x302*x304))+((new_r20*sj4))+(((-1.0)*x301*x304)));
evalcond[11]=(x299+(((-1.0)*x296*x304))+(((-1.0)*x295*x304))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x305=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x305.valid){
continue;
}
CheckValue<IkReal> x306 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x306.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x305.value)))+(x306.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x307=IKcos(j5);
IkReal x308=IKsin(j5);
IkReal x309=((1.0)*x308);
IkReal x310=(cj3*new_r01);
IkReal x311=(new_r11*sj3);
IkReal x312=(cj4*x308);
IkReal x313=((1.0)*sj3);
IkReal x314=((-1.0)*x309);
IkReal x315=((1.0)*x307);
IkReal x316=(cj3*new_r00);
IkReal x317=(new_r10*sj3);
IkReal x318=(cj3*x315);
IkReal x319=((1.0)*cj4);
evalcond[0]=(((sj4*x307))+new_r20);
evalcond[1]=((((-1.0)*sj4*x309))+new_r21);
evalcond[2]=(x312+x310+x311);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x313))+x314);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x313))+(((-1.0)*x315)));
evalcond[5]=(((cj3*x312))+new_r01+((sj3*x307)));
evalcond[6]=((((-1.0)*cj4*x315))+x316+x317);
evalcond[7]=(((sj3*x308))+(((-1.0)*cj4*x318))+new_r00);
evalcond[8]=((((-1.0)*x318))+new_r11+((sj3*x312)));
evalcond[9]=((((-1.0)*cj4*x307*x313))+new_r10+(((-1.0)*cj3*x309)));
evalcond[10]=(x307+(((-1.0)*x317*x319))+((new_r20*sj4))+(((-1.0)*x316*x319)));
evalcond[11]=((((-1.0)*x311*x319))+x314+((new_r21*sj4))+(((-1.0)*x310*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x320=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x320.valid){
continue;
}
CheckValue<IkReal> x321 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x321.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x320.value)))+(x321.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x322=IKcos(j3);
IkReal x323=((1.0)*sj4);
IkReal x324=(x322*x323);
IkReal x325=IKsin(j3);
IkReal x326=(x323*x325);
IkReal x327=(new_r02*x322);
IkReal x328=(new_r12*x325);
IkReal x329=((1.0)*cj4);
evalcond[0]=((((-1.0)*x324))+new_r02);
evalcond[1]=((((-1.0)*x326))+new_r12);
evalcond[2]=(((new_r12*x322))+(((-1.0)*new_r02*x325)));
evalcond[3]=((((-1.0)*x323))+x328+x327);
evalcond[4]=((((-1.0)*x328*x329))+((new_r22*sj4))+(((-1.0)*x327*x329)));
evalcond[5]=((((-1.0)*new_r00*x324))+(((-1.0)*new_r10*x326))+(((-1.0)*new_r20*x329)));
evalcond[6]=((((-1.0)*new_r21*x329))+(((-1.0)*new_r01*x324))+(((-1.0)*new_r11*x326)));
evalcond[7]=((1.0)+(((-1.0)*x323*x327))+(((-1.0)*x323*x328))+(((-1.0)*new_r22*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x330=(cj1*cj2);
IkReal x331=(sj1*sj2);
IkReal x332=(x330+(((-1.0)*x331)));
IkReal x333=x107;
IkReal x334=(cj0*x333);
IkReal x335=(sj0*x333);
IkReal x336=((1.0)*sj0);
IkReal x337=(x331+(((-1.0)*x330)));
IkReal x338=(cj0*x337);
IkReal x339=(sj0*x337);
new_r00=(((r00*x334))+((r10*x335))+((r20*x332)));
new_r01=(((r01*x334))+((r21*x332))+((r11*x335)));
new_r02=(((r22*x332))+((r12*x335))+((r02*x334)));
new_r10=((((-1.0)*r00*x336))+((cj0*r10)));
new_r11=((((-1.0)*r01*x336))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x336)));
new_r20=(((r00*x338))+((r20*x333))+((r10*x339)));
new_r21=(((r11*x339))+((r01*x338))+((r21*x333)));
new_r22=(((r22*x333))+((r02*x338))+((r12*x339)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x340=(cj1*cj2);
IkReal x341=(sj1*sj2);
IkReal x342=((((-1.0)*x341))+x340);
IkReal x343=x107;
IkReal x344=(cj0*x343);
IkReal x345=(sj0*x343);
IkReal x346=((1.0)*sj0);
IkReal x347=((((-1.0)*x340))+x341);
IkReal x348=(cj0*x347);
IkReal x349=(sj0*x347);
new_r00=(((r10*x345))+((r20*x342))+((r00*x344)));
new_r01=(((r01*x344))+((r21*x342))+((r11*x345)));
new_r02=(((r02*x344))+((r22*x342))+((r12*x345)));
new_r10=(((cj0*r10))+(((-1.0)*r00*x346)));
new_r11=((((-1.0)*r01*x346))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x346)));
new_r20=(((r20*x343))+((r10*x349))+((r00*x348)));
new_r21=(((r11*x349))+((r21*x343))+((r01*x348)));
new_r22=(((r12*x349))+((r22*x343))+((r02*x348)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x350=(cj1*cj2);
IkReal x351=(sj1*sj2);
IkReal x352=(x350+(((-1.0)*x351)));
IkReal x353=x107;
IkReal x354=(cj0*x353);
IkReal x355=(sj0*x353);
IkReal x356=((1.0)*sj0);
IkReal x357=(x351+(((-1.0)*x350)));
IkReal x358=(cj0*x357);
IkReal x359=(sj0*x357);
new_r00=(((r10*x355))+((r00*x354))+((r20*x352)));
new_r01=(((r21*x352))+((r11*x355))+((r01*x354)));
new_r02=(((r12*x355))+((r22*x352))+((r02*x354)));
new_r10=((((-1.0)*r00*x356))+((cj0*r10)));
new_r11=((((-1.0)*r01*x356))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x356)));
new_r20=(((r10*x359))+((r20*x353))+((r00*x358)));
new_r21=(((r11*x359))+((r21*x353))+((r01*x358)));
new_r22=(((r12*x359))+((r22*x353))+((r02*x358)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x360=((1.0)*cj4);
IkReal x361=(new_r22+(((-1.0)*x360)));
IkReal x362=((1.0)*sj4);
IkReal x363=((((-1.0)*x362))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x361;
evalcond[2]=x361;
evalcond[3]=new_r02;
evalcond[4]=x363;
evalcond[5]=x363;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r12*x360)));
evalcond[7]=((((-1.0)*new_r10*x362))+(((-1.0)*new_r20*x360)));
evalcond[8]=((((-1.0)*new_r11*x362))+(((-1.0)*new_r21*x360)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x362))+(((-1.0)*new_r22*x360)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x365.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x364.value)))+(x365.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x366=IKcos(j5);
IkReal x367=IKsin(j5);
IkReal x368=((1.0)*x367);
IkReal x369=((1.0)*new_r22);
IkReal x370=((-1.0)*x368);
evalcond[0]=(new_r20+((new_r12*x366)));
evalcond[1]=(new_r11+((new_r22*x367)));
evalcond[2]=((((-1.0)*new_r12*x368))+new_r21);
evalcond[3]=((((-1.0)*x366*x369))+new_r10);
evalcond[4]=((((-1.0)*(1.0)*new_r00))+x370);
evalcond[5]=((((-1.0)*x366))+(((-1.0)*(1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r10*x369))+((new_r12*new_r20))+x366);
evalcond[7]=(((new_r12*new_r21))+(((-1.0)*new_r11*x369))+x370);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x371=((1.0)*cj4);
IkReal x372=((((-1.0)*x371))+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x372;
evalcond[2]=x372;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*(1.0)*new_r12))+(((-1.0)*(1.0)*sj4)));
evalcond[6]=(((new_r22*sj4))+((cj4*new_r12)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x371)));
evalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x371)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x371))+((new_r12*sj4)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x373=IKsin(j5);
IkReal x374=((-1.0)*x373);
IkReal x375=IKcos(j5);
IkReal x376=((1.0)*x375);
IkReal x377=((1.0)*new_r12);
evalcond[0]=(((new_r12*x373))+new_r21);
evalcond[1]=(new_r00+x374);
evalcond[2]=(new_r01+(((-1.0)*x376)));
evalcond[3]=((((-1.0)*x375*x377))+new_r20);
evalcond[4]=(((new_r22*x373))+(((-1.0)*(1.0)*new_r11)));
evalcond[5]=((((-1.0)*(1.0)*new_r10))+(((-1.0)*new_r22*x376)));
evalcond[6]=(((new_r10*new_r22))+(((-1.0)*new_r20*x377))+x375);
evalcond[7]=(((new_r11*new_r22))+(((-1.0)*new_r21*x377))+x374);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x378=((1.0)*cj3);
IkReal x379=((1.0)*sj3);
IkReal x380=((((-1.0)*new_r02*x379))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x378))+new_r02);
evalcond[3]=((((-1.0)*x379))+new_r12);
evalcond[4]=x380;
evalcond[5]=x380;
evalcond[6]=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[7]=(((new_r11*sj3))+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x378))+(((-1.0)*new_r10*x379)));
evalcond[10]=((((-1.0)*new_r11*x379))+(((-1.0)*new_r01*x378)));
evalcond[11]=((1.0)+(((-1.0)*new_r12*x379))+(((-1.0)*new_r02*x378)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x381=IKcos(j5);
IkReal x382=IKsin(j5);
IkReal x383=((1.0)*x382);
IkReal x384=((-1.0)*x383);
IkReal x385=((1.0)*x381);
IkReal x386=((1.0)*new_r12);
evalcond[0]=(x381+new_r20);
evalcond[1]=(x384+new_r21);
evalcond[2]=(((new_r12*x381))+new_r01);
evalcond[3]=(((new_r12*x382))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x385))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x383))+new_r10);
evalcond[6]=(x384+((new_r02*new_r10))+(((-1.0)*new_r00*x386)));
evalcond[7]=((((-1.0)*new_r01*x386))+((new_r02*new_r11))+(((-1.0)*x385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x387=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x388=((1.0)+((new_r12*sj3))+((cj3*new_r02)));
IkReal x389=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x390=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x387;
evalcond[5]=x387;
evalcond[6]=x388;
evalcond[7]=x389;
evalcond[8]=x390;
evalcond[9]=x390;
evalcond[10]=x389;
evalcond[11]=x388;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x391=IKsin(j5);
IkReal x392=IKcos(j5);
IkReal x393=((1.0)*x392);
IkReal x394=((-1.0)*x393);
IkReal x395=((1.0)*x391);
IkReal x396=((1.0)*new_r02);
evalcond[0]=(x391+new_r21);
evalcond[1]=(x394+new_r20);
evalcond[2]=(((new_r02*x392))+new_r11);
evalcond[3]=(new_r10+((new_r02*x391)));
evalcond[4]=((((-1.0)*new_r12*x393))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x395))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*x395))+(((-1.0)*new_r10*x396)));
evalcond[7]=(x394+((new_r01*new_r12))+(((-1.0)*new_r11*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x397=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x398=(cj3*new_r02);
IkReal x399=(new_r12*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x397;
evalcond[7]=x397;
evalcond[8]=(x398+x399);
evalcond[9]=((((-1.0)*x399))+(((-1.0)*x398)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x400=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x400))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x400))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x400))), (((cj3*new_r00))+(((-1.0)*sj3*x400))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x401=IKsin(j5);
IkReal x402=(cj3*x401);
IkReal x403=IKcos(j5);
IkReal x404=((1.0)*x403);
IkReal x405=((-1.0)*x404);
IkReal x406=((1.0)*sj3);
IkReal x407=(((sj3*x401))+(((-1.0)*cj3*x404)));
evalcond[0]=(((new_r11*sj3))+x401+((cj3*new_r01)));
evalcond[1]=(x402+new_r01+((sj3*x403)));
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+x405);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x406))+(((-1.0)*x401)));
evalcond[4]=(((cj3*new_r11))+x405+(((-1.0)*new_r01*x406)));
evalcond[5]=(x407+new_r00);
evalcond[6]=(x407+new_r11);
evalcond[7]=((((-1.0)*x403*x406))+(((-1.0)*x402))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x408=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x409=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x408;
evalcond[7]=x408;
evalcond[8]=x409;
evalcond[9]=x409;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x410=((1.0)*new_r00);
if( IKabs((((cj3*new_r01))+(((-1.0)*sj3*x410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x410))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*sj3*x410))))+IKsqr(((((-1.0)*cj3*x410))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*sj3*x410))), ((((-1.0)*cj3*x410))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x411=IKcos(j5);
IkReal x412=IKsin(j5);
IkReal x413=((1.0)*x412);
IkReal x414=((-1.0)*x413);
IkReal x415=(cj3*x411);
IkReal x416=((1.0)*sj3);
IkReal x417=(((sj3*x411))+(((-1.0)*cj3*x413)));
evalcond[0]=(((new_r10*sj3))+((cj3*new_r00))+x411);
evalcond[1]=(((new_r11*sj3))+x414+((cj3*new_r01)));
evalcond[2]=(x415+((sj3*x412))+new_r00);
evalcond[3]=(((cj3*new_r10))+x414+(((-1.0)*new_r00*x416)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x411))+(((-1.0)*new_r01*x416)));
evalcond[5]=(x417+new_r01);
evalcond[6]=(x417+new_r10);
evalcond[7]=((((-1.0)*x412*x416))+new_r11+(((-1.0)*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x418=((1.0)*cj4);
IkReal x419=((((-1.0)*x418))+new_r22);
IkReal x420=((1.0)*sj4);
IkReal x421=((((-1.0)*x420))+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x419;
evalcond[2]=x419;
evalcond[3]=x421;
evalcond[4]=new_r12;
evalcond[5]=x421;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x418)));
evalcond[7]=((((-1.0)*new_r00*x420))+(((-1.0)*new_r20*x418)));
evalcond[8]=((((-1.0)*new_r01*x420))+(((-1.0)*new_r21*x418)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x418))+(((-1.0)*new_r02*x420)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x422=IKcos(j5);
IkReal x423=IKsin(j5);
IkReal x424=((1.0)*x423);
IkReal x425=((-1.0)*x424);
IkReal x426=((1.0)*new_r22);
evalcond[0]=(((new_r02*x422))+new_r20);
evalcond[1]=(x425+new_r10);
evalcond[2]=(new_r11+(((-1.0)*x422)));
evalcond[3]=(((new_r22*x423))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x424))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*x422*x426)));
evalcond[6]=(((new_r02*new_r20))+x422+(((-1.0)*new_r00*x426)));
evalcond[7]=(((new_r02*new_r21))+(((-1.0)*new_r01*x426))+x425);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x427=((1.0)*cj4);
IkReal x428=((((-1.0)*x427))+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x428;
evalcond[2]=x428;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*(1.0)*sj4))+(((-1.0)*(1.0)*new_r02)));
evalcond[6]=(((new_r22*sj4))+((cj4*new_r02)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x427)));
evalcond[8]=((((-1.0)*new_r21*x427))+((new_r01*sj4)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x427)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x429 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x429.valid){
continue;
}
CheckValue<IkReal> x430=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x430.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x429.value)+(((1.5707963267949)*(x430.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x431=IKsin(j5);
IkReal x432=IKcos(j5);
IkReal x433=((1.0)*new_r02);
IkReal x434=((-1.0)*x431);
IkReal x435=((1.0)*x432);
evalcond[0]=(((new_r02*x431))+new_r21);
evalcond[1]=((((-1.0)*x432*x433))+new_r20);
evalcond[2]=((((-1.0)*(1.0)*new_r10))+x434);
evalcond[3]=((((-1.0)*x435))+(((-1.0)*(1.0)*new_r11)));
evalcond[4]=(((new_r22*x431))+(((-1.0)*(1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r22*x435))+(((-1.0)*(1.0)*new_r00)));
evalcond[6]=((((-1.0)*new_r20*x433))+((new_r00*new_r22))+x432);
evalcond[7]=((((-1.0)*new_r21*x433))+((new_r01*new_r22))+x434);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x437=IKPowWithIntegerCheck(sj4,-1);
if(!x437.valid){
continue;
}
IkReal x436=x437.value;
CheckValue<IkReal> x438=IKPowWithIntegerCheck(cj3,-1);
if(!x438.valid){
continue;
}
CheckValue<IkReal> x439=IKPowWithIntegerCheck(cj4,-1);
if(!x439.valid){
continue;
}
if( IKabs((x436*(x438.value)*(x439.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x436)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x436*(x438.value)*(x439.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x436))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x436*(x438.value)*(x439.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))), ((-1.0)*new_r20*x436));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x440=IKcos(j5);
IkReal x441=IKsin(j5);
IkReal x442=((1.0)*x441);
IkReal x443=(cj3*new_r01);
IkReal x444=(new_r11*sj3);
IkReal x445=(cj4*x441);
IkReal x446=((1.0)*sj3);
IkReal x447=((-1.0)*x442);
IkReal x448=((1.0)*x440);
IkReal x449=(cj3*new_r00);
IkReal x450=(new_r10*sj3);
IkReal x451=(cj3*x448);
IkReal x452=((1.0)*cj4);
evalcond[0]=(((sj4*x440))+new_r20);
evalcond[1]=((((-1.0)*sj4*x442))+new_r21);
evalcond[2]=(x443+x444+x445);
evalcond[3]=(((cj3*new_r10))+x447+(((-1.0)*new_r00*x446)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x446))+(((-1.0)*x448)));
evalcond[5]=(((sj3*x440))+((cj3*x445))+new_r01);
evalcond[6]=((((-1.0)*cj4*x448))+x450+x449);
evalcond[7]=((((-1.0)*cj4*x451))+new_r00+((sj3*x441)));
evalcond[8]=((((-1.0)*x451))+new_r11+((sj3*x445)));
evalcond[9]=((((-1.0)*cj3*x442))+(((-1.0)*cj4*x440*x446))+new_r10);
evalcond[10]=((((-1.0)*x449*x452))+((new_r20*sj4))+x440+(((-1.0)*x450*x452)));
evalcond[11]=((((-1.0)*x443*x452))+x447+(((-1.0)*x444*x452))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x455=IKPowWithIntegerCheck(sj4,-1);
if(!x455.valid){
continue;
}
IkReal x453=x455.value;
IkReal x454=((1.0)*new_r20);
CheckValue<IkReal> x456=IKPowWithIntegerCheck(sj3,-1);
if(!x456.valid){
continue;
}
if( IKabs((x453*(x456.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x454)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x453*x454)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x453*(x456.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x454))))))+IKsqr(((-1.0)*x453*x454))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x453*(x456.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x454))))), ((-1.0)*x453*x454));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x457=IKcos(j5);
IkReal x458=IKsin(j5);
IkReal x459=((1.0)*x458);
IkReal x460=(cj3*new_r01);
IkReal x461=(new_r11*sj3);
IkReal x462=(cj4*x458);
IkReal x463=((1.0)*sj3);
IkReal x464=((-1.0)*x459);
IkReal x465=((1.0)*x457);
IkReal x466=(cj3*new_r00);
IkReal x467=(new_r10*sj3);
IkReal x468=(cj3*x465);
IkReal x469=((1.0)*cj4);
evalcond[0]=(((sj4*x457))+new_r20);
evalcond[1]=((((-1.0)*sj4*x459))+new_r21);
evalcond[2]=(x460+x462+x461);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x463))+x464);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x463))+(((-1.0)*x465)));
evalcond[5]=(((sj3*x457))+((cj3*x462))+new_r01);
evalcond[6]=((((-1.0)*cj4*x465))+x466+x467);
evalcond[7]=(((sj3*x458))+new_r00+(((-1.0)*cj4*x468)));
evalcond[8]=(((sj3*x462))+(((-1.0)*x468))+new_r11);
evalcond[9]=(new_r10+(((-1.0)*cj3*x459))+(((-1.0)*cj4*x457*x463)));
evalcond[10]=((((-1.0)*x466*x469))+(((-1.0)*x467*x469))+((new_r20*sj4))+x457);
evalcond[11]=((((-1.0)*x460*x469))+(((-1.0)*x461*x469))+((new_r21*sj4))+x464);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x470=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x470.valid){
continue;
}
CheckValue<IkReal> x471 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x471.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x470.value)))+(x471.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x472=IKcos(j5);
IkReal x473=IKsin(j5);
IkReal x474=((1.0)*x473);
IkReal x475=(cj3*new_r01);
IkReal x476=(new_r11*sj3);
IkReal x477=(cj4*x473);
IkReal x478=((1.0)*sj3);
IkReal x479=((-1.0)*x474);
IkReal x480=((1.0)*x472);
IkReal x481=(cj3*new_r00);
IkReal x482=(new_r10*sj3);
IkReal x483=(cj3*x480);
IkReal x484=((1.0)*cj4);
evalcond[0]=(((sj4*x472))+new_r20);
evalcond[1]=((((-1.0)*sj4*x474))+new_r21);
evalcond[2]=(x476+x477+x475);
evalcond[3]=(((cj3*new_r10))+x479+(((-1.0)*new_r00*x478)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x480))+(((-1.0)*new_r01*x478)));
evalcond[5]=(((sj3*x472))+new_r01+((cj3*x477)));
evalcond[6]=((((-1.0)*cj4*x480))+x481+x482);
evalcond[7]=((((-1.0)*cj4*x483))+((sj3*x473))+new_r00);
evalcond[8]=((((-1.0)*x483))+((sj3*x477))+new_r11);
evalcond[9]=((((-1.0)*cj3*x474))+(((-1.0)*cj4*x472*x478))+new_r10);
evalcond[10]=(x472+(((-1.0)*x481*x484))+(((-1.0)*x482*x484))+((new_r20*sj4)));
evalcond[11]=(x479+((new_r21*sj4))+(((-1.0)*x475*x484))+(((-1.0)*x476*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - kuka_kr60_ha (21137f13bc231529f77b319295f4d6a5)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2016-01-27 16:58:02.099866
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKsin(j[5]);
x1=IKcos(j[3]);
x2=IKsin(j[0]);
x3=((1.0)*x2);
x4=(x1*x3);
x5=IKsin(j[3]);
x6=IKcos(j[0]);
x7=IKsin(j[1]);
x8=IKcos(j[2]);
x9=(x7*x8);
x10=((1.0)*x9);
x11=IKsin(j[2]);
x12=IKcos(j[1]);
x13=(x11*x12);
x14=((1.0)*x13);
x15=(x6*(((((-1.0)*(1.0)*x10))+(((-1.0)*(1.0)*x14)))));
x16=(x15*x5);
x17=IKcos(j[5]);
x18=IKsin(j[4]);
x19=((1.0)*x18);
x20=(x12*x8);
x21=(x20*x6);
x22=(x11*x7);
x23=((1.0)*x22);
x24=(x21+(((-1.0)*(1.0)*x23*x6)));
x25=IKcos(j[4]);
x26=((1.0)*x25);
x27=(x2*x5);
x28=((1.0)*x1);
x29=(((x26*(((((1.0)*x27))+((x15*x28))))))+(((-1.0)*(1.0)*x19*x24)));
x30=(x1*x15);
x31=((0.85)*x12);
x32=((0.82)*x11*x7);
x33=((0.145)*x6);
x34=((0.17)*x22);
x35=((0.17)*x20);
x36=(x1*x6);
x37=(x3*(((((-1.0)*(1.0)*x13))+(((-1.0)*(1.0)*x9)))));
x38=(x37*x5);
x39=(x2*x20);
x40=(x39+(((-1.0)*(1.0)*x22*x3)));
x41=(x5*x6);
x42=((1.0)*x41);
x43=(((x26*(((((-1.0)*(1.0)*x42))+((x28*x37))))))+(((-1.0)*(1.0)*x19*x40)));
x44=(x1*x37);
x45=((0.145)*x2);
x46=((((-1.0)*(1.0)*x23))+x20);
x47=((((-1.0)*(1.0)*x10))+(((-1.0)*(1.0)*x14)));
x48=((((-1.0)*(1.0)*x19*x47))+(((-1.0)*(1.0)*x25*x28*x46)));
x49=(x23+(((-1.0)*(1.0)*x20)));
x50=(x1*x18);
eerot[0]=(((x0*(((((-1.0)*(1.0)*x16))+x4))))+((x17*x29)));
eerot[1]=(((x0*x29))+((x17*((x16+(((-1.0)*(1.0)*x4)))))));
eerot[2]=(((x18*((x30+x27))))+((x24*x25)));
IkReal x51=((1.0)*x6);
eetrans[0]=((((0.35)*x6))+(((-1.0)*x32*x51))+((x33*x9))+((x31*x6))+(((0.82)*x21))+((x13*x33))+((x18*(((((0.17)*x27))+(((0.17)*x30))))))+((x25*(((((-1.0)*x34*x51))+((x35*x6)))))));
eerot[3]=(((x17*x43))+((x0*(((((-1.0)*(1.0)*x38))+(((-1.0)*(1.0)*x36)))))));
eerot[4]=(((x0*x43))+((x17*((x36+x38)))));
eerot[5]=(((x25*x40))+((x18*(((((-1.0)*(1.0)*x42))+x44)))));
IkReal x52=((1.0)*x2);
eetrans[1]=(((x13*x45))+(((0.82)*x39))+((x25*((((x2*x35))+(((-1.0)*x34*x52))))))+((x18*(((((0.17)*x44))+(((-1.0)*(0.17)*x41))))))+((x2*x31))+(((-1.0)*x32*x52))+(((0.35)*x2))+((x45*x9)));
eerot[6]=(((x17*x48))+((x0*x46*x5)));
eerot[7]=(((x0*x48))+((x17*x49*x5)));
eerot[8]=(((x49*x50))+((x25*x47)));
eetrans[2]=((0.815)+(((-1.0)*(0.82)*x9))+(((-1.0)*(0.85)*x7))+((x50*((x34+(((-1.0)*(1.0)*x35))))))+(((0.145)*x20))+((x25*(((((-1.0)*(0.17)*x13))+(((-1.0)*(0.17)*x9))))))+(((-1.0)*(0.82)*x13))+(((-1.0)*(0.145)*x22)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*(((1.0)*r00)));
new_r01=r01;
new_r02=((-1.0)*(((1.0)*r02)));
new_px=(px+(((-1.0)*(0.17)*r02)));
new_r10=((-1.0)*(((1.0)*r10)));
new_r11=r11;
new_r12=((-1.0)*(((1.0)*r12)));
new_py=(py+(((-1.0)*(0.17)*r12)));
new_r20=((-1.0)*(((1.0)*r20)));
new_r21=r21;
new_r22=((-1.0)*(((1.0)*r22)));
new_pz=((-0.815)+(((-1.0)*(0.17)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*py);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x53)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=(((pz*r11))+(((-1.0)*r21*x53)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x55)));
rxp2_0=((((-1.0)*r22*x53))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x54))+((px*r22)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x57 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x57.valid){
continue;
}
IkReal x56=((-1.0)*(x57.value));
j0array[0]=x56;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x56);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.913676767405458)+(((-1.0)*(0.70640104173451)*pp))+(((0.494480729214157)*py*sj0))+(((0.494480729214157)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((0.913676767405458)+(((-1.0)*(0.70640104173451)*pp))+(((0.494480729214157)*py*sj0))+(((0.494480729214157)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x58=IKasin(((0.913676767405458)+(((-1.0)*(0.70640104173451)*pp))+(((0.494480729214157)*py*sj0))+(((0.494480729214157)*cj0*px))));
j2array[0]=((-1.39577630171373)+(((-1.0)*x58)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.74581635187607)+x58);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
IkReal x59=(cj2*pz);
IkReal x60=(pz*sj2);
IkReal x61=(cj0*cj2*px);
IkReal x62=(cj0*px*sj2);
IkReal x63=(cj2*py*sj0);
IkReal x64=(py*sj0*sj2);
j1eval[0]=((((-2.85714285714286)*x61))+(((16.1576354679803)*x64))+(((-1.0)*(5.6551724137931)*sj2))+(((16.1576354679803)*x62))+(((-2.85714285714286)*x63))+(((-2.85714285714286)*x60))+(((-1.0)*(16.7487684729064)*pz))+cj2+(((-16.1576354679803)*x59)));
j1eval[1]=IKsign(((((-0.145)*x61))+(((-1.0)*(0.287)*sj2))+(((-0.145)*x60))+(((0.82)*x64))+(((-0.145)*x63))+(((0.82)*x62))+(((-0.82)*x59))+(((-1.0)*(0.85)*pz))+(((0.05075)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x65=(cj0*px);
IkReal x66=(cj2*pz);
IkReal x67=(py*sj0);
IkReal x68=(pz*sj2);
IkReal x69=(cj0*cj2*px);
IkReal x70=(cj0*px*sj2);
IkReal x71=(cj2*py*sj0);
IkReal x72=(py*sj0*sj2);
j1eval[0]=((-5.86206896551724)+(((-1.0)*(5.6551724137931)*cj2))+(((-2.85714285714286)*x66))+(((-1.0)*(1.0)*sj2))+(((16.1576354679803)*x71))+(((2.85714285714286)*x70))+(((2.85714285714286)*x72))+(((16.1576354679803)*x68))+(((16.1576354679803)*x69))+(((16.7487684729064)*x67))+(((16.7487684729064)*x65)));
j1eval[1]=IKsign(((-0.2975)+(((-1.0)*(0.287)*cj2))+(((0.145)*x70))+(((-1.0)*(0.05075)*sj2))+(((0.85)*x67))+(((0.85)*x65))+(((-0.145)*x66))+(((0.145)*x72))+(((0.82)*x71))+(((0.82)*x68))+(((0.82)*x69))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x73=(cj0*px);
IkReal x74=(py*sj0);
IkReal x75=py*py;
IkReal x76=((8.16326530612245)*x75);
IkReal x77=pz*pz;
IkReal x78=(cj0*px*py*sj0);
IkReal x79=cj0*cj0;
IkReal x80=(x79*(px*px));
j1eval[0]=((-1.0)+(((5.71428571428571)*x73))+(((-8.16326530612245)*x80))+(((-8.16326530612245)*x77))+(((-16.3265306122449)*x78))+((x76*x79))+(((-1.0)*x76))+(((5.71428571428571)*x74)));
j1eval[1]=IKsign(((-0.1225)+(((-2.0)*x78))+(((-1.0)*x80))+(((0.7)*x74))+(((-1.0)*x75))+(((-1.0)*x77))+((x75*x79))+(((0.7)*x73))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x81=(cj0*px);
IkReal x82=(py*sj0);
IkReal x83=py*py;
IkReal x84=cj0*cj0;
IkReal x85=(cj2*pz);
IkReal x86=(pz*sj2);
IkReal x87=(cj0*cj2*px);
IkReal x88=(cj0*px*sj2);
IkReal x89=(cj2*py*sj0);
IkReal x90=(py*sj0*sj2);
CheckValue<IkReal> x91 = IKatan2WithCheck(IkReal(((((0.85)*pz))+(((-0.145)*x87))+(((-1.0)*(0.287)*sj2))+(((0.82)*x85))+(((0.82)*x90))+(((-0.145)*x89))+(((0.145)*x86))+(((0.05075)*cj2))+(((0.82)*x88)))),((0.2975)+(((0.287)*cj2))+(((0.82)*x86))+(((-0.82)*x89))+(((-0.82)*x87))+(((-0.85)*x82))+(((-0.145)*x88))+(((-0.145)*x90))+(((0.05075)*sj2))+(((-0.85)*x81))+(((-0.145)*x85))),IKFAST_ATAN2_MAGTHRESH);
if(!x91.valid){
continue;
}
CheckValue<IkReal> x92=IKPowWithIntegerCheck(IKsign(((-0.1225)+(((-1.0)*x84*(px*px)))+(((-1.0)*x83))+((x83*x84))+(((0.7)*x81))+(((0.7)*x82))+(((-2.0)*cj0*px*x82))+(((-1.0)*(1.0)*(pz*pz))))),-1);
if(!x92.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x91.value)+(((1.5707963267949)*(x92.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x93=((0.145)*cj2);
IkReal x94=((0.82)*sj2);
IkReal x95=IKcos(j1);
IkReal x96=IKsin(j1);
IkReal x97=(cj0*px);
IkReal x98=(py*sj0);
IkReal x99=((0.82)*cj2);
IkReal x100=((0.145)*sj2);
IkReal x101=(pz*x96);
IkReal x102=((1.0)*x97);
IkReal x103=((1.0)*x98);
IkReal x104=((1.7)*x95);
evalcond[0]=(x94+((pz*x95))+((x96*x98))+(((-0.35)*x96))+(((-1.0)*x93))+((x96*x97)));
evalcond[1]=((((0.85)*x96))+pz+((x96*x99))+((x94*x95))+(((-1.0)*x93*x95))+((x100*x96)));
evalcond[2]=((0.85)+x100+x101+x99+(((-1.0)*x102*x95))+(((0.35)*x95))+(((-1.0)*x103*x95)));
evalcond[3]=((-0.151575)+((x104*x97))+(((-1.7)*x101))+(((0.7)*x97))+(((-0.595)*x95))+((x104*x98))+(((-1.0)*(1.0)*pp))+(((0.7)*x98)));
evalcond[4]=((0.35)+((x93*x96))+(((0.85)*x95))+((x100*x95))+(((-1.0)*x103))+((x95*x99))+(((-1.0)*x102))+(((-1.0)*x94*x96)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x486=(cj0*px);
IkReal x487=(py*sj0);
IkReal x488=((0.82)*cj2);
IkReal x489=((0.145)*sj2);
IkReal x490=(cj2*sj2);
IkReal x491=cj2*cj2;
IkReal x492=((1.0)*pz);
CheckValue<IkReal> x493 = IKatan2WithCheck(IkReal(((-0.1189)+(((0.2378)*x491))+(((-1.0)*x487*x492))+(((-1.0)*x486*x492))+(((-1.0)*(0.697)*sj2))+(((0.35)*pz))+(((0.12325)*cj2))+(((-0.651375)*x490)))),((0.743525)+(((1.394)*cj2))+(((0.2378)*x490))+(((0.2465)*sj2))+(((-1.0)*(1.0)*(pz*pz)))+(((0.651375)*x491))),IKFAST_ATAN2_MAGTHRESH);
if(!x493.valid){
continue;
}
CheckValue<IkReal> x494=IKPowWithIntegerCheck(IKsign(((-0.2975)+(((0.85)*x487))+(((-1.0)*(0.287)*cj2))+(((-1.0)*(0.145)*cj2*pz))+(((-1.0)*(0.05075)*sj2))+(((0.82)*pz*sj2))+(((0.85)*x486))+((x487*x488))+((x487*x489))+((x486*x488))+((x486*x489)))),-1);
if(!x494.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x493.value)+(((1.5707963267949)*(x494.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x495=((0.145)*cj2);
IkReal x496=((0.82)*sj2);
IkReal x497=IKcos(j1);
IkReal x498=IKsin(j1);
IkReal x499=(cj0*px);
IkReal x500=(py*sj0);
IkReal x501=((0.82)*cj2);
IkReal x502=((0.145)*sj2);
IkReal x503=(pz*x498);
IkReal x504=((1.0)*x499);
IkReal x505=((1.0)*x500);
IkReal x506=((1.7)*x497);
evalcond[0]=((((-0.35)*x498))+((pz*x497))+((x498*x499))+(((-1.0)*x495))+x496+((x498*x500)));
evalcond[1]=(pz+(((0.85)*x498))+((x496*x497))+((x498*x501))+(((-1.0)*x495*x497))+((x498*x502)));
evalcond[2]=((0.85)+(((-1.0)*x497*x505))+x503+x501+x502+(((-1.0)*x497*x504))+(((0.35)*x497)));
evalcond[3]=((-0.151575)+(((-1.7)*x503))+(((0.7)*x500))+((x500*x506))+(((-0.595)*x497))+(((0.7)*x499))+((x499*x506))+(((-1.0)*(1.0)*pp)));
evalcond[4]=((0.35)+(((-1.0)*x496*x498))+((x495*x498))+((x497*x502))+(((-1.0)*x505))+((x497*x501))+(((0.85)*x497))+(((-1.0)*x504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x507=((0.145)*cj2);
IkReal x508=(cj0*px);
IkReal x509=((0.82)*sj2);
IkReal x510=(py*sj0);
IkReal x511=(cj2*sj2);
IkReal x512=cj2*cj2;
IkReal x513=((1.0)*pz);
CheckValue<IkReal> x514 = IKatan2WithCheck(IkReal(((-0.6724)+(pz*pz)+(((0.651375)*x512))+(((0.2378)*x511)))),((0.1189)+(((0.651375)*x511))+(((0.697)*sj2))+(((-1.0)*(0.12325)*cj2))+(((0.35)*pz))+(((-1.0)*x510*x513))+(((-1.0)*x508*x513))+(((-0.2378)*x512))),IKFAST_ATAN2_MAGTHRESH);
if(!x514.valid){
continue;
}
CheckValue<IkReal> x515=IKPowWithIntegerCheck(IKsign(((((-1.0)*(0.145)*pz*sj2))+(((-1.0)*(0.82)*cj2*pz))+((x509*x510))+(((-1.0)*(0.287)*sj2))+(((-1.0)*x507*x510))+((x508*x509))+(((-1.0)*x507*x508))+(((-1.0)*(0.85)*pz))+(((0.05075)*cj2)))),-1);
if(!x515.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x514.value)+(((1.5707963267949)*(x515.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x516=((0.145)*cj2);
IkReal x517=((0.82)*sj2);
IkReal x518=IKcos(j1);
IkReal x519=IKsin(j1);
IkReal x520=(cj0*px);
IkReal x521=(py*sj0);
IkReal x522=((0.82)*cj2);
IkReal x523=((0.145)*sj2);
IkReal x524=(pz*x519);
IkReal x525=((1.0)*x520);
IkReal x526=((1.0)*x521);
IkReal x527=((1.7)*x518);
evalcond[0]=((((-1.0)*x516))+((x519*x521))+((pz*x518))+((x519*x520))+(((-0.35)*x519))+x517);
evalcond[1]=(((x517*x518))+(((0.85)*x519))+(((-1.0)*x516*x518))+pz+((x519*x523))+((x519*x522)));
evalcond[2]=((0.85)+(((0.35)*x518))+(((-1.0)*x518*x525))+(((-1.0)*x518*x526))+x524+x522+x523);
evalcond[3]=((-0.151575)+(((-1.7)*x524))+((x521*x527))+(((-0.595)*x518))+(((-1.0)*(1.0)*pp))+((x520*x527))+(((0.7)*x520))+(((0.7)*x521)));
evalcond[4]=((0.35)+(((0.85)*x518))+(((-1.0)*x525))+((x518*x523))+((x516*x519))+(((-1.0)*x526))+((x518*x522))+(((-1.0)*x517*x519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x105=(cj1*cj2);
IkReal x106=(sj1*sj2);
IkReal x107=(x105+(((-1.0)*x106)));
IkReal x108=(((cj1*sj2))+((cj2*sj1)));
IkReal x109=(cj0*x108);
IkReal x110=(sj0*x108);
IkReal x111=((1.0)*sj0);
IkReal x112=(x106+(((-1.0)*x105)));
IkReal x113=(cj0*x112);
IkReal x114=(sj0*x112);
new_r00=(((r10*x110))+((r20*x107))+((r00*x109)));
new_r01=(((r11*x110))+((r21*x107))+((r01*x109)));
new_r02=(((r22*x107))+((r12*x110))+((r02*x109)));
new_r10=((((-1.0)*r00*x111))+((cj0*r10)));
new_r11=((((-1.0)*r01*x111))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x111)));
new_r20=(((r20*x108))+((r00*x113))+((r10*x114)));
new_r21=(((r11*x114))+((r21*x108))+((r01*x113)));
new_r22=(((r12*x114))+((r02*x113))+((r22*x108)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
IkReal x115=(cj1*cj2);
IkReal x116=(sj1*sj2);
IkReal x117=((((-1.0)*x116))+x115);
IkReal x118=x108;
IkReal x119=(cj0*x118);
IkReal x120=(sj0*x118);
IkReal x121=((1.0)*sj0);
IkReal x122=((((-1.0)*x115))+x116);
IkReal x123=(cj0*x122);
IkReal x124=(sj0*x122);
new_r00=(((r00*x119))+((r10*x120))+((r20*x117)));
new_r01=(((r01*x119))+((r21*x117))+((r11*x120)));
new_r02=(((r02*x119))+((r12*x120))+((r22*x117)));
new_r10=((((-1.0)*r00*x121))+((cj0*r10)));
new_r11=((((-1.0)*r01*x121))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x121)));
new_r20=(((r10*x124))+((r00*x123))+((r20*x118)));
new_r21=(((r11*x124))+((r01*x123))+((r21*x118)));
new_r22=(((r12*x124))+((r02*x123))+((r22*x118)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x125=(cj1*cj2);
IkReal x126=(sj1*sj2);
IkReal x127=(x125+(((-1.0)*x126)));
IkReal x128=x108;
IkReal x129=(cj0*x128);
IkReal x130=(sj0*x128);
IkReal x131=((1.0)*sj0);
IkReal x132=(x126+(((-1.0)*x125)));
IkReal x133=(cj0*x132);
IkReal x134=(sj0*x132);
new_r00=(((r10*x130))+((r20*x127))+((r00*x129)));
new_r01=(((r01*x129))+((r21*x127))+((r11*x130)));
new_r02=(((r02*x129))+((r12*x130))+((r22*x127)));
new_r10=((((-1.0)*r00*x131))+((cj0*r10)));
new_r11=((((-1.0)*r01*x131))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x131)));
new_r20=(((r20*x128))+((r10*x134))+((r00*x133)));
new_r21=(((r01*x133))+((r21*x128))+((r11*x134)));
new_r22=(((r02*x133))+((r22*x128))+((r12*x134)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x136 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x136.valid){
continue;
}
IkReal x135=((-1.0)*(((1.0)*(x136.value))));
j3array[0]=x135;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x135);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x137=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x137))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x137))))+IKsqr(((((-1.0)*sj3*x137))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x137))), ((((-1.0)*sj3*x137))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x138=IKsin(j5);
IkReal x139=(cj3*x138);
IkReal x140=IKcos(j5);
IkReal x141=((1.0)*x140);
IkReal x142=((-1.0)*x141);
IkReal x143=((1.0)*sj3);
IkReal x144=(((sj3*x138))+(((-1.0)*cj3*x141)));
evalcond[0]=(x138+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=(x139+new_r01+((sj3*x140)));
evalcond[2]=(((new_r10*sj3))+x142+((cj3*new_r00)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x143))+(((-1.0)*x138)));
evalcond[4]=(((cj3*new_r11))+x142+(((-1.0)*new_r01*x143)));
evalcond[5]=(x144+new_r00);
evalcond[6]=(x144+new_r11);
evalcond[7]=((((-1.0)*x140*x143))+new_r10+(((-1.0)*x139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
IkReal x145=((-1.0)*(((1.0)*(x146.value))));
j3array[0]=x145;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x145);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x147=((1.0)*new_r00);
if( IKabs((((cj3*new_r01))+(((-1.0)*sj3*x147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x147))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*sj3*x147))))+IKsqr(((((-1.0)*cj3*x147))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*sj3*x147))), ((((-1.0)*cj3*x147))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x148=IKcos(j5);
IkReal x149=IKsin(j5);
IkReal x150=((1.0)*x149);
IkReal x151=((-1.0)*x150);
IkReal x152=(cj3*x148);
IkReal x153=((1.0)*sj3);
IkReal x154=((((-1.0)*cj3*x150))+((sj3*x148)));
evalcond[0]=(((new_r10*sj3))+x148+((cj3*new_r00)));
evalcond[1]=(x151+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(x152+((sj3*x149))+new_r00);
evalcond[3]=(((cj3*new_r10))+x151+(((-1.0)*new_r00*x153)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x148))+(((-1.0)*new_r01*x153)));
evalcond[5]=(x154+new_r01);
evalcond[6]=(x154+new_r10);
evalcond[7]=((((-1.0)*x149*x153))+new_r11+(((-1.0)*x152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x156=IKPowWithIntegerCheck(sj4,-1);
if(!x156.valid){
continue;
}
IkReal x155=x156.value;
CheckValue<IkReal> x157=IKPowWithIntegerCheck(new_r12,-1);
if(!x157.valid){
continue;
}
if( IKabs((x155*(x157.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x155)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x155*(x157.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4)))))))+IKsqr((new_r02*x155))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x155*(x157.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4)))))), (new_r02*x155));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x158=IKcos(j3);
IkReal x159=((1.0)*sj4);
IkReal x160=(x158*x159);
IkReal x161=IKsin(j3);
IkReal x162=(x159*x161);
IkReal x163=(new_r02*x158);
IkReal x164=(new_r12*x161);
IkReal x165=((1.0)*cj4);
evalcond[0]=((((-1.0)*x160))+new_r02);
evalcond[1]=((((-1.0)*x162))+new_r12);
evalcond[2]=(((new_r12*x158))+(((-1.0)*new_r02*x161)));
evalcond[3]=((((-1.0)*x159))+x163+x164);
evalcond[4]=(((new_r22*sj4))+(((-1.0)*x164*x165))+(((-1.0)*x163*x165)));
evalcond[5]=((((-1.0)*new_r10*x162))+(((-1.0)*new_r00*x160))+(((-1.0)*new_r20*x165)));
evalcond[6]=((((-1.0)*new_r01*x160))+(((-1.0)*new_r21*x165))+(((-1.0)*new_r11*x162)));
evalcond[7]=((1.0)+(((-1.0)*x159*x163))+(((-1.0)*x159*x164))+(((-1.0)*new_r22*x165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x166=(cj1*cj2);
IkReal x167=(sj1*sj2);
IkReal x168=(x166+(((-1.0)*x167)));
IkReal x169=x108;
IkReal x170=(cj0*x169);
IkReal x171=(sj0*x169);
IkReal x172=((1.0)*sj0);
IkReal x173=(x167+(((-1.0)*x166)));
IkReal x174=(cj0*x173);
IkReal x175=(sj0*x173);
new_r00=(((r10*x171))+((r20*x168))+((r00*x170)));
new_r01=(((r01*x170))+((r21*x168))+((r11*x171)));
new_r02=(((r12*x171))+((r22*x168))+((r02*x170)));
new_r10=((((-1.0)*r00*x172))+((cj0*r10)));
new_r11=((((-1.0)*r01*x172))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x172)));
new_r20=(((r10*x175))+((r20*x169))+((r00*x174)));
new_r21=(((r01*x174))+((r21*x169))+((r11*x175)));
new_r22=(((r12*x175))+((r22*x169))+((r02*x174)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x176=(cj1*cj2);
IkReal x177=(sj1*sj2);
IkReal x178=((((-1.0)*x177))+x176);
IkReal x179=x108;
IkReal x180=(cj0*x179);
IkReal x181=(sj0*x179);
IkReal x182=((1.0)*sj0);
IkReal x183=((((-1.0)*x176))+x177);
IkReal x184=(cj0*x183);
IkReal x185=(sj0*x183);
new_r00=(((r10*x181))+((r20*x178))+((r00*x180)));
new_r01=(((r11*x181))+((r01*x180))+((r21*x178)));
new_r02=(((r22*x178))+((r12*x181))+((r02*x180)));
new_r10=((((-1.0)*r00*x182))+((cj0*r10)));
new_r11=((((-1.0)*r01*x182))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x182)));
new_r20=(((r10*x185))+((r00*x184))+((r20*x179)));
new_r21=(((r11*x185))+((r01*x184))+((r21*x179)));
new_r22=(((r22*x179))+((r02*x184))+((r12*x185)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x186=(cj1*cj2);
IkReal x187=(sj1*sj2);
IkReal x188=((((-1.0)*x187))+x186);
IkReal x189=x108;
IkReal x190=(cj0*x189);
IkReal x191=(sj0*x189);
IkReal x192=((1.0)*sj0);
IkReal x193=((((-1.0)*x186))+x187);
IkReal x194=(cj0*x193);
IkReal x195=(sj0*x193);
new_r00=(((r10*x191))+((r00*x190))+((r20*x188)));
new_r01=(((r01*x190))+((r21*x188))+((r11*x191)));
new_r02=(((r02*x190))+((r22*x188))+((r12*x191)));
new_r10=((((-1.0)*r00*x192))+((cj0*r10)));
new_r11=((((-1.0)*r01*x192))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x192)));
new_r20=(((r00*x194))+((r10*x195))+((r20*x189)));
new_r21=(((r21*x189))+((r11*x195))+((r01*x194)));
new_r22=(((r12*x195))+((r22*x189))+((r02*x194)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x196=((1.0)*cj4);
IkReal x197=((((-1.0)*x196))+new_r22);
IkReal x198=((1.0)*sj4);
IkReal x199=((((-1.0)*x198))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x197;
evalcond[2]=x197;
evalcond[3]=new_r02;
evalcond[4]=x199;
evalcond[5]=x199;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r12*x196)));
evalcond[7]=((((-1.0)*new_r20*x196))+(((-1.0)*new_r10*x198)));
evalcond[8]=((((-1.0)*new_r21*x196))+(((-1.0)*new_r11*x198)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x196))+(((-1.0)*new_r12*x198)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x200=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x200.valid){
continue;
}
CheckValue<IkReal> x201 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x201.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x200.value)))+(x201.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x202=IKcos(j5);
IkReal x203=IKsin(j5);
IkReal x204=((1.0)*x203);
IkReal x205=((1.0)*new_r22);
IkReal x206=((-1.0)*x204);
evalcond[0]=(new_r20+((new_r12*x202)));
evalcond[1]=(((new_r22*x203))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x204))+new_r21);
evalcond[3]=((((-1.0)*x202*x205))+new_r10);
evalcond[4]=((((-1.0)*(1.0)*new_r00))+x206);
evalcond[5]=((((-1.0)*x202))+(((-1.0)*(1.0)*new_r01)));
evalcond[6]=(((new_r12*new_r20))+(((-1.0)*new_r10*x205))+x202);
evalcond[7]=(((new_r12*new_r21))+(((-1.0)*new_r11*x205))+x206);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x207=((1.0)*cj4);
IkReal x208=((((-1.0)*x207))+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x208;
evalcond[2]=x208;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*(1.0)*new_r12))+(((-1.0)*(1.0)*sj4)));
evalcond[6]=(((new_r22*sj4))+((cj4*new_r12)));
evalcond[7]=((((-1.0)*new_r20*x207))+((new_r10*sj4)));
evalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x207)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x207))+((new_r12*sj4)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x209=IKsin(j5);
IkReal x210=((-1.0)*x209);
IkReal x211=IKcos(j5);
IkReal x212=((1.0)*x211);
IkReal x213=((1.0)*new_r12);
evalcond[0]=(((new_r12*x209))+new_r21);
evalcond[1]=(x210+new_r00);
evalcond[2]=(new_r01+(((-1.0)*x212)));
evalcond[3]=((((-1.0)*x211*x213))+new_r20);
evalcond[4]=(((new_r22*x209))+(((-1.0)*(1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r22*x212))+(((-1.0)*(1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x213))+((new_r10*new_r22))+x211);
evalcond[7]=(((new_r11*new_r22))+(((-1.0)*new_r21*x213))+x210);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x214=((1.0)*cj3);
IkReal x215=((1.0)*sj3);
IkReal x216=((((-1.0)*new_r02*x215))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x214))+new_r02);
evalcond[3]=((((-1.0)*x215))+new_r12);
evalcond[4]=x216;
evalcond[5]=x216;
evalcond[6]=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[7]=(((new_r11*sj3))+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r10*x215))+(((-1.0)*new_r00*x214)));
evalcond[10]=((((-1.0)*new_r11*x215))+(((-1.0)*new_r01*x214)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x214))+(((-1.0)*new_r12*x215)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x217=IKcos(j5);
IkReal x218=IKsin(j5);
IkReal x219=((1.0)*x218);
IkReal x220=((-1.0)*x219);
IkReal x221=((1.0)*x217);
IkReal x222=((1.0)*new_r12);
evalcond[0]=(x217+new_r20);
evalcond[1]=(x220+new_r21);
evalcond[2]=(((new_r12*x217))+new_r01);
evalcond[3]=(((new_r12*x218))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*new_r02*x221)));
evalcond[5]=(new_r10+(((-1.0)*new_r02*x219)));
evalcond[6]=((((-1.0)*new_r00*x222))+((new_r02*new_r10))+x220);
evalcond[7]=((((-1.0)*x221))+((new_r02*new_r11))+(((-1.0)*new_r01*x222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x223=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x224=((1.0)+((new_r12*sj3))+((cj3*new_r02)));
IkReal x225=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x226=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x223;
evalcond[5]=x223;
evalcond[6]=x224;
evalcond[7]=x225;
evalcond[8]=x226;
evalcond[9]=x226;
evalcond[10]=x225;
evalcond[11]=x224;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x227=IKsin(j5);
IkReal x228=IKcos(j5);
IkReal x229=((1.0)*x228);
IkReal x230=((-1.0)*x229);
IkReal x231=((1.0)*x227);
IkReal x232=((1.0)*new_r02);
evalcond[0]=(x227+new_r21);
evalcond[1]=(new_r20+x230);
evalcond[2]=(new_r11+((new_r02*x228)));
evalcond[3]=(new_r10+((new_r02*x227)));
evalcond[4]=((((-1.0)*new_r12*x229))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x231))+new_r00);
evalcond[6]=((((-1.0)*x231))+((new_r00*new_r12))+(((-1.0)*new_r10*x232)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x232))+x230);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x233=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x234=(cj3*new_r02);
IkReal x235=(new_r12*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x233;
evalcond[7]=x233;
evalcond[8]=(x234+x235);
evalcond[9]=((((-1.0)*x235))+(((-1.0)*x234)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x236=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x236))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x236))))+IKsqr(((((-1.0)*sj3*x236))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x236))), ((((-1.0)*sj3*x236))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x237=IKsin(j5);
IkReal x238=(cj3*x237);
IkReal x239=IKcos(j5);
IkReal x240=((1.0)*x239);
IkReal x241=((-1.0)*x240);
IkReal x242=((1.0)*sj3);
IkReal x243=(((sj3*x237))+(((-1.0)*cj3*x240)));
evalcond[0]=(((new_r11*sj3))+((cj3*new_r01))+x237);
evalcond[1]=(((sj3*x239))+new_r01+x238);
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+x241);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x242))+(((-1.0)*x237)));
evalcond[4]=(((cj3*new_r11))+x241+(((-1.0)*new_r01*x242)));
evalcond[5]=(x243+new_r00);
evalcond[6]=(x243+new_r11);
evalcond[7]=((((-1.0)*x238))+(((-1.0)*x239*x242))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x244=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x245=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x244;
evalcond[7]=x244;
evalcond[8]=x245;
evalcond[9]=x245;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x246=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj3*x246))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x246))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj3*x246))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*x246))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj3*x246))+((cj3*new_r01))), ((((-1.0)*cj3*x246))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x247=IKcos(j5);
IkReal x248=IKsin(j5);
IkReal x249=((1.0)*x248);
IkReal x250=((-1.0)*x249);
IkReal x251=(cj3*x247);
IkReal x252=((1.0)*sj3);
IkReal x253=((((-1.0)*cj3*x249))+((sj3*x247)));
evalcond[0]=(((new_r10*sj3))+((cj3*new_r00))+x247);
evalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+x250);
evalcond[2]=(((sj3*x248))+x251+new_r00);
evalcond[3]=(((cj3*new_r10))+x250+(((-1.0)*new_r00*x252)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x252))+(((-1.0)*x247)));
evalcond[5]=(x253+new_r01);
evalcond[6]=(x253+new_r10);
evalcond[7]=((((-1.0)*x251))+new_r11+(((-1.0)*x248*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x254=((1.0)*cj4);
IkReal x255=((((-1.0)*x254))+new_r22);
IkReal x256=((1.0)*sj4);
IkReal x257=((((-1.0)*x256))+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x255;
evalcond[2]=x255;
evalcond[3]=x257;
evalcond[4]=new_r12;
evalcond[5]=x257;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x254)));
evalcond[7]=((((-1.0)*new_r20*x254))+(((-1.0)*new_r00*x256)));
evalcond[8]=((((-1.0)*new_r21*x254))+(((-1.0)*new_r01*x256)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x254))+(((-1.0)*new_r02*x256)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x258=IKcos(j5);
IkReal x259=IKsin(j5);
IkReal x260=((1.0)*x259);
IkReal x261=((-1.0)*x260);
IkReal x262=((1.0)*new_r22);
evalcond[0]=(((new_r02*x258))+new_r20);
evalcond[1]=(x261+new_r10);
evalcond[2]=(new_r11+(((-1.0)*x258)));
evalcond[3]=(((new_r22*x259))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x260))+new_r21);
evalcond[5]=((((-1.0)*x258*x262))+new_r00);
evalcond[6]=(((new_r02*new_r20))+x258+(((-1.0)*new_r00*x262)));
evalcond[7]=(((new_r02*new_r21))+x261+(((-1.0)*new_r01*x262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x263=((1.0)*cj4);
IkReal x264=((((-1.0)*x263))+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x264;
evalcond[2]=x264;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*(1.0)*sj4))+(((-1.0)*(1.0)*new_r02)));
evalcond[6]=(((new_r22*sj4))+((cj4*new_r02)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x263)));
evalcond[8]=((((-1.0)*new_r21*x263))+((new_r01*sj4)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x263)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x265 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x265.valid){
continue;
}
CheckValue<IkReal> x266=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x266.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x265.value)+(((1.5707963267949)*(x266.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x267=IKsin(j5);
IkReal x268=IKcos(j5);
IkReal x269=((1.0)*new_r02);
IkReal x270=((-1.0)*x267);
IkReal x271=((1.0)*x268);
evalcond[0]=(((new_r02*x267))+new_r21);
evalcond[1]=((((-1.0)*x268*x269))+new_r20);
evalcond[2]=((((-1.0)*(1.0)*new_r10))+x270);
evalcond[3]=((((-1.0)*x271))+(((-1.0)*(1.0)*new_r11)));
evalcond[4]=((((-1.0)*(1.0)*new_r01))+((new_r22*x267)));
evalcond[5]=((((-1.0)*new_r22*x271))+(((-1.0)*(1.0)*new_r00)));
evalcond[6]=(x268+(((-1.0)*new_r20*x269))+((new_r00*new_r22)));
evalcond[7]=(((new_r01*new_r22))+(((-1.0)*new_r21*x269))+x270);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x273=IKPowWithIntegerCheck(sj4,-1);
if(!x273.valid){
continue;
}
IkReal x272=x273.value;
CheckValue<IkReal> x274=IKPowWithIntegerCheck(cj3,-1);
if(!x274.valid){
continue;
}
CheckValue<IkReal> x275=IKPowWithIntegerCheck(cj4,-1);
if(!x275.valid){
continue;
}
if( IKabs((x272*(x274.value)*(x275.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x272)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x272*(x274.value)*(x275.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x272))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x272*(x274.value)*(x275.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))), ((-1.0)*new_r20*x272));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x276=IKcos(j5);
IkReal x277=IKsin(j5);
IkReal x278=((1.0)*x277);
IkReal x279=(cj3*new_r01);
IkReal x280=(new_r11*sj3);
IkReal x281=(cj4*x277);
IkReal x282=((1.0)*sj3);
IkReal x283=((-1.0)*x278);
IkReal x284=((1.0)*x276);
IkReal x285=(cj3*new_r00);
IkReal x286=(new_r10*sj3);
IkReal x287=(cj3*x284);
IkReal x288=((1.0)*cj4);
evalcond[0]=(((sj4*x276))+new_r20);
evalcond[1]=((((-1.0)*sj4*x278))+new_r21);
evalcond[2]=(x279+x281+x280);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x282))+x283);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x282))+(((-1.0)*x284)));
evalcond[5]=(((cj3*x281))+((sj3*x276))+new_r01);
evalcond[6]=((((-1.0)*cj4*x284))+x285+x286);
evalcond[7]=((((-1.0)*cj4*x287))+((sj3*x277))+new_r00);
evalcond[8]=(((sj3*x281))+(((-1.0)*x287))+new_r11);
evalcond[9]=((((-1.0)*cj3*x278))+(((-1.0)*cj4*x276*x282))+new_r10);
evalcond[10]=((((-1.0)*x285*x288))+x276+(((-1.0)*x286*x288))+((new_r20*sj4)));
evalcond[11]=((((-1.0)*x280*x288))+x283+((new_r21*sj4))+(((-1.0)*x279*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x291=IKPowWithIntegerCheck(sj4,-1);
if(!x291.valid){
continue;
}
IkReal x289=x291.value;
IkReal x290=((1.0)*new_r20);
CheckValue<IkReal> x292=IKPowWithIntegerCheck(sj3,-1);
if(!x292.valid){
continue;
}
if( IKabs((x289*(x292.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x290)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x289*x290)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x289*(x292.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x290))))))+IKsqr(((-1.0)*x289*x290))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x289*(x292.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x290))))), ((-1.0)*x289*x290));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x293=IKcos(j5);
IkReal x294=IKsin(j5);
IkReal x295=((1.0)*x294);
IkReal x296=(cj3*new_r01);
IkReal x297=(new_r11*sj3);
IkReal x298=(cj4*x294);
IkReal x299=((1.0)*sj3);
IkReal x300=((-1.0)*x295);
IkReal x301=((1.0)*x293);
IkReal x302=(cj3*new_r00);
IkReal x303=(new_r10*sj3);
IkReal x304=(cj3*x301);
IkReal x305=((1.0)*cj4);
evalcond[0]=(new_r20+((sj4*x293)));
evalcond[1]=((((-1.0)*sj4*x295))+new_r21);
evalcond[2]=(x297+x296+x298);
evalcond[3]=(((cj3*new_r10))+x300+(((-1.0)*new_r00*x299)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x301))+(((-1.0)*new_r01*x299)));
evalcond[5]=(((sj3*x293))+new_r01+((cj3*x298)));
evalcond[6]=(x303+x302+(((-1.0)*cj4*x301)));
evalcond[7]=(((sj3*x294))+(((-1.0)*cj4*x304))+new_r00);
evalcond[8]=(((sj3*x298))+(((-1.0)*x304))+new_r11);
evalcond[9]=((((-1.0)*cj4*x293*x299))+(((-1.0)*cj3*x295))+new_r10);
evalcond[10]=((((-1.0)*x302*x305))+x293+(((-1.0)*x303*x305))+((new_r20*sj4)));
evalcond[11]=(x300+(((-1.0)*x296*x305))+(((-1.0)*x297*x305))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x306=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x306.valid){
continue;
}
CheckValue<IkReal> x307 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x307.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x306.value)))+(x307.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x308=IKcos(j5);
IkReal x309=IKsin(j5);
IkReal x310=((1.0)*x309);
IkReal x311=(cj3*new_r01);
IkReal x312=(new_r11*sj3);
IkReal x313=(cj4*x309);
IkReal x314=((1.0)*sj3);
IkReal x315=((-1.0)*x310);
IkReal x316=((1.0)*x308);
IkReal x317=(cj3*new_r00);
IkReal x318=(new_r10*sj3);
IkReal x319=(cj3*x316);
IkReal x320=((1.0)*cj4);
evalcond[0]=(((sj4*x308))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*sj4*x310)));
evalcond[2]=(x312+x313+x311);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x314))+x315);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x314))+(((-1.0)*x316)));
evalcond[5]=(((sj3*x308))+new_r01+((cj3*x313)));
evalcond[6]=(x317+x318+(((-1.0)*cj4*x316)));
evalcond[7]=(((sj3*x309))+(((-1.0)*cj4*x319))+new_r00);
evalcond[8]=(((sj3*x313))+(((-1.0)*x319))+new_r11);
evalcond[9]=((((-1.0)*cj3*x310))+(((-1.0)*cj4*x308*x314))+new_r10);
evalcond[10]=(x308+(((-1.0)*x317*x320))+((new_r20*sj4))+(((-1.0)*x318*x320)));
evalcond[11]=((((-1.0)*x312*x320))+(((-1.0)*x311*x320))+x315+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x321=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x321.valid){
continue;
}
CheckValue<IkReal> x322 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x322.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x321.value)))+(x322.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x323=IKcos(j3);
IkReal x324=((1.0)*sj4);
IkReal x325=(x323*x324);
IkReal x326=IKsin(j3);
IkReal x327=(x324*x326);
IkReal x328=(new_r02*x323);
IkReal x329=(new_r12*x326);
IkReal x330=((1.0)*cj4);
evalcond[0]=((((-1.0)*x325))+new_r02);
evalcond[1]=((((-1.0)*x327))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x326))+((new_r12*x323)));
evalcond[3]=((((-1.0)*x324))+x329+x328);
evalcond[4]=(((new_r22*sj4))+(((-1.0)*x329*x330))+(((-1.0)*x328*x330)));
evalcond[5]=((((-1.0)*new_r10*x327))+(((-1.0)*new_r20*x330))+(((-1.0)*new_r00*x325)));
evalcond[6]=((((-1.0)*new_r11*x327))+(((-1.0)*new_r21*x330))+(((-1.0)*new_r01*x325)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x330))+(((-1.0)*x324*x329))+(((-1.0)*x324*x328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x331=(cj1*cj2);
IkReal x332=(sj1*sj2);
IkReal x333=(x331+(((-1.0)*x332)));
IkReal x334=x108;
IkReal x335=(cj0*x334);
IkReal x336=(sj0*x334);
IkReal x337=((1.0)*sj0);
IkReal x338=(x332+(((-1.0)*x331)));
IkReal x339=(cj0*x338);
IkReal x340=(sj0*x338);
new_r00=(((r00*x335))+((r10*x336))+((r20*x333)));
new_r01=(((r01*x335))+((r11*x336))+((r21*x333)));
new_r02=(((r22*x333))+((r12*x336))+((r02*x335)));
new_r10=((((-1.0)*r00*x337))+((cj0*r10)));
new_r11=((((-1.0)*r01*x337))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x337)));
new_r20=(((r10*x340))+((r00*x339))+((r20*x334)));
new_r21=(((r01*x339))+((r21*x334))+((r11*x340)));
new_r22=(((r22*x334))+((r02*x339))+((r12*x340)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x341=(cj1*cj2);
IkReal x342=(sj1*sj2);
IkReal x343=(x341+(((-1.0)*x342)));
IkReal x344=x108;
IkReal x345=(cj0*x344);
IkReal x346=(sj0*x344);
IkReal x347=((1.0)*sj0);
IkReal x348=((((-1.0)*x341))+x342);
IkReal x349=(cj0*x348);
IkReal x350=(sj0*x348);
new_r00=(((r20*x343))+((r00*x345))+((r10*x346)));
new_r01=(((r11*x346))+((r01*x345))+((r21*x343)));
new_r02=(((r22*x343))+((r12*x346))+((r02*x345)));
new_r10=((((-1.0)*r00*x347))+((cj0*r10)));
new_r11=((((-1.0)*r01*x347))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x347)));
new_r20=(((r10*x350))+((r00*x349))+((r20*x344)));
new_r21=(((r21*x344))+((r01*x349))+((r11*x350)));
new_r22=(((r12*x350))+((r02*x349))+((r22*x344)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x351=(cj1*cj2);
IkReal x352=(sj1*sj2);
IkReal x353=(x351+(((-1.0)*x352)));
IkReal x354=x108;
IkReal x355=(cj0*x354);
IkReal x356=(sj0*x354);
IkReal x357=((1.0)*sj0);
IkReal x358=(x352+(((-1.0)*x351)));
IkReal x359=(cj0*x358);
IkReal x360=(sj0*x358);
new_r00=(((r00*x355))+((r20*x353))+((r10*x356)));
new_r01=(((r11*x356))+((r01*x355))+((r21*x353)));
new_r02=(((r22*x353))+((r12*x356))+((r02*x355)));
new_r10=((((-1.0)*r00*x357))+((cj0*r10)));
new_r11=((((-1.0)*r01*x357))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x357)));
new_r20=(((r20*x354))+((r00*x359))+((r10*x360)));
new_r21=(((r11*x360))+((r01*x359))+((r21*x354)));
new_r22=(((r22*x354))+((r12*x360))+((r02*x359)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x361=((1.0)*cj4);
IkReal x362=((((-1.0)*x361))+new_r22);
IkReal x363=((1.0)*sj4);
IkReal x364=((((-1.0)*x363))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x362;
evalcond[2]=x362;
evalcond[3]=new_r02;
evalcond[4]=x364;
evalcond[5]=x364;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r12*x361)));
evalcond[7]=((((-1.0)*new_r10*x363))+(((-1.0)*new_r20*x361)));
evalcond[8]=((((-1.0)*new_r11*x363))+(((-1.0)*new_r21*x361)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x363))+(((-1.0)*new_r22*x361)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x365=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x365.valid){
continue;
}
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x365.value)))+(x366.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x367=IKcos(j5);
IkReal x368=IKsin(j5);
IkReal x369=((1.0)*x368);
IkReal x370=((1.0)*new_r22);
IkReal x371=((-1.0)*x369);
evalcond[0]=(((new_r12*x367))+new_r20);
evalcond[1]=(((new_r22*x368))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x369))+new_r21);
evalcond[3]=((((-1.0)*x367*x370))+new_r10);
evalcond[4]=((((-1.0)*(1.0)*new_r00))+x371);
evalcond[5]=((((-1.0)*x367))+(((-1.0)*(1.0)*new_r01)));
evalcond[6]=(((new_r12*new_r20))+(((-1.0)*new_r10*x370))+x367);
evalcond[7]=(((new_r12*new_r21))+(((-1.0)*new_r11*x370))+x371);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x372=((1.0)*cj4);
IkReal x373=((((-1.0)*x372))+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x373;
evalcond[2]=x373;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*(1.0)*new_r12))+(((-1.0)*(1.0)*sj4)));
evalcond[6]=(((new_r22*sj4))+((cj4*new_r12)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x372)));
evalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x372)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x372))+((new_r12*sj4)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x374=IKsin(j5);
IkReal x375=((-1.0)*x374);
IkReal x376=IKcos(j5);
IkReal x377=((1.0)*x376);
IkReal x378=((1.0)*new_r12);
evalcond[0]=(((new_r12*x374))+new_r21);
evalcond[1]=(new_r00+x375);
evalcond[2]=((((-1.0)*x377))+new_r01);
evalcond[3]=((((-1.0)*x376*x378))+new_r20);
evalcond[4]=(((new_r22*x374))+(((-1.0)*(1.0)*new_r11)));
evalcond[5]=((((-1.0)*(1.0)*new_r10))+(((-1.0)*new_r22*x377)));
evalcond[6]=(((new_r10*new_r22))+(((-1.0)*new_r20*x378))+x376);
evalcond[7]=(((new_r11*new_r22))+(((-1.0)*new_r21*x378))+x375);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x379=((1.0)*cj3);
IkReal x380=((1.0)*sj3);
IkReal x381=((((-1.0)*new_r02*x380))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x379))+new_r02);
evalcond[3]=((((-1.0)*x380))+new_r12);
evalcond[4]=x381;
evalcond[5]=x381;
evalcond[6]=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[7]=(((new_r11*sj3))+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x379))+(((-1.0)*new_r10*x380)));
evalcond[10]=((((-1.0)*new_r01*x379))+(((-1.0)*new_r11*x380)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x379))+(((-1.0)*new_r12*x380)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x382=IKcos(j5);
IkReal x383=IKsin(j5);
IkReal x384=((1.0)*x383);
IkReal x385=((-1.0)*x384);
IkReal x386=((1.0)*x382);
IkReal x387=((1.0)*new_r12);
evalcond[0]=(x382+new_r20);
evalcond[1]=(x385+new_r21);
evalcond[2]=(((new_r12*x382))+new_r01);
evalcond[3]=(((new_r12*x383))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x386))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x384))+new_r10);
evalcond[6]=(x385+((new_r02*new_r10))+(((-1.0)*new_r00*x387)));
evalcond[7]=((((-1.0)*x386))+(((-1.0)*new_r01*x387))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x388=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x389=((1.0)+((new_r12*sj3))+((cj3*new_r02)));
IkReal x390=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x391=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x388;
evalcond[5]=x388;
evalcond[6]=x389;
evalcond[7]=x390;
evalcond[8]=x391;
evalcond[9]=x391;
evalcond[10]=x390;
evalcond[11]=x389;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x392=IKsin(j5);
IkReal x393=IKcos(j5);
IkReal x394=((1.0)*x393);
IkReal x395=((-1.0)*x394);
IkReal x396=((1.0)*x392);
IkReal x397=((1.0)*new_r02);
evalcond[0]=(x392+new_r21);
evalcond[1]=(x395+new_r20);
evalcond[2]=(((new_r02*x393))+new_r11);
evalcond[3]=(((new_r02*x392))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x394))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*new_r12*x396)));
evalcond[6]=((((-1.0)*new_r10*x397))+((new_r00*new_r12))+(((-1.0)*x396)));
evalcond[7]=(x395+(((-1.0)*new_r11*x397))+((new_r01*new_r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x398=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x399=(cj3*new_r02);
IkReal x400=(new_r12*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x398;
evalcond[7]=x398;
evalcond[8]=(x399+x400);
evalcond[9]=((((-1.0)*x399))+(((-1.0)*x400)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x401=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x401))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x401))))+IKsqr(((((-1.0)*sj3*x401))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x401))), ((((-1.0)*sj3*x401))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x402=IKsin(j5);
IkReal x403=(cj3*x402);
IkReal x404=IKcos(j5);
IkReal x405=((1.0)*x404);
IkReal x406=((-1.0)*x405);
IkReal x407=((1.0)*sj3);
IkReal x408=(((sj3*x402))+(((-1.0)*cj3*x405)));
evalcond[0]=(((new_r11*sj3))+x402+((cj3*new_r01)));
evalcond[1]=(((sj3*x404))+x403+new_r01);
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+x406);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x407))+(((-1.0)*x402)));
evalcond[4]=(((cj3*new_r11))+x406+(((-1.0)*new_r01*x407)));
evalcond[5]=(x408+new_r00);
evalcond[6]=(x408+new_r11);
evalcond[7]=((((-1.0)*x404*x407))+(((-1.0)*x403))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x409=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x410=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x409;
evalcond[7]=x409;
evalcond[8]=x410;
evalcond[9]=x410;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x411=((1.0)*new_r00);
if( IKabs((((cj3*new_r01))+(((-1.0)*sj3*x411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x411))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*sj3*x411))))+IKsqr(((((-1.0)*cj3*x411))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*sj3*x411))), ((((-1.0)*cj3*x411))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x412=IKcos(j5);
IkReal x413=IKsin(j5);
IkReal x414=((1.0)*x413);
IkReal x415=((-1.0)*x414);
IkReal x416=(cj3*x412);
IkReal x417=((1.0)*sj3);
IkReal x418=(((sj3*x412))+(((-1.0)*cj3*x414)));
evalcond[0]=(((new_r10*sj3))+((cj3*new_r00))+x412);
evalcond[1]=(((new_r11*sj3))+x415+((cj3*new_r01)));
evalcond[2]=(x416+((sj3*x413))+new_r00);
evalcond[3]=(((cj3*new_r10))+x415+(((-1.0)*new_r00*x417)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x412))+(((-1.0)*new_r01*x417)));
evalcond[5]=(x418+new_r01);
evalcond[6]=(x418+new_r10);
evalcond[7]=((((-1.0)*x416))+(((-1.0)*x413*x417))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x419=((1.0)*cj4);
IkReal x420=((((-1.0)*x419))+new_r22);
IkReal x421=((1.0)*sj4);
IkReal x422=((((-1.0)*x421))+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x420;
evalcond[2]=x420;
evalcond[3]=x422;
evalcond[4]=new_r12;
evalcond[5]=x422;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x419)));
evalcond[7]=((((-1.0)*new_r00*x421))+(((-1.0)*new_r20*x419)));
evalcond[8]=((((-1.0)*new_r21*x419))+(((-1.0)*new_r01*x421)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x419))+(((-1.0)*new_r02*x421)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x423=IKcos(j5);
IkReal x424=IKsin(j5);
IkReal x425=((1.0)*x424);
IkReal x426=((-1.0)*x425);
IkReal x427=((1.0)*new_r22);
evalcond[0]=(((new_r02*x423))+new_r20);
evalcond[1]=(x426+new_r10);
evalcond[2]=(new_r11+(((-1.0)*x423)));
evalcond[3]=(((new_r22*x424))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x425))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*x423*x427)));
evalcond[6]=(((new_r02*new_r20))+x423+(((-1.0)*new_r00*x427)));
evalcond[7]=((((-1.0)*new_r01*x427))+((new_r02*new_r21))+x426);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x428=((1.0)*cj4);
IkReal x429=((((-1.0)*x428))+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x429;
evalcond[2]=x429;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*(1.0)*sj4))+(((-1.0)*(1.0)*new_r02)));
evalcond[6]=(((new_r22*sj4))+((cj4*new_r02)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x428)));
evalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x428)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x428)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x430 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x430.valid){
continue;
}
CheckValue<IkReal> x431=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x431.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x430.value)+(((1.5707963267949)*(x431.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x432=IKsin(j5);
IkReal x433=IKcos(j5);
IkReal x434=((1.0)*new_r02);
IkReal x435=((-1.0)*x432);
IkReal x436=((1.0)*x433);
evalcond[0]=(((new_r02*x432))+new_r21);
evalcond[1]=((((-1.0)*x433*x434))+new_r20);
evalcond[2]=((((-1.0)*(1.0)*new_r10))+x435);
evalcond[3]=((((-1.0)*x436))+(((-1.0)*(1.0)*new_r11)));
evalcond[4]=((((-1.0)*(1.0)*new_r01))+((new_r22*x432)));
evalcond[5]=((((-1.0)*(1.0)*new_r00))+(((-1.0)*new_r22*x436)));
evalcond[6]=((((-1.0)*new_r20*x434))+((new_r00*new_r22))+x433);
evalcond[7]=(((new_r01*new_r22))+(((-1.0)*new_r21*x434))+x435);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x438=IKPowWithIntegerCheck(sj4,-1);
if(!x438.valid){
continue;
}
IkReal x437=x438.value;
CheckValue<IkReal> x439=IKPowWithIntegerCheck(cj3,-1);
if(!x439.valid){
continue;
}
CheckValue<IkReal> x440=IKPowWithIntegerCheck(cj4,-1);
if(!x440.valid){
continue;
}
if( IKabs((x437*(x439.value)*(x440.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x437)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x437*(x439.value)*(x440.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x437))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x437*(x439.value)*(x440.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))), ((-1.0)*new_r20*x437));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x441=IKcos(j5);
IkReal x442=IKsin(j5);
IkReal x443=((1.0)*x442);
IkReal x444=(cj3*new_r01);
IkReal x445=(new_r11*sj3);
IkReal x446=(cj4*x442);
IkReal x447=((1.0)*sj3);
IkReal x448=((-1.0)*x443);
IkReal x449=((1.0)*x441);
IkReal x450=(cj3*new_r00);
IkReal x451=(new_r10*sj3);
IkReal x452=(cj3*x449);
IkReal x453=((1.0)*cj4);
evalcond[0]=(((sj4*x441))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*sj4*x443)));
evalcond[2]=(x446+x444+x445);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x447))+x448);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x447))+(((-1.0)*x449)));
evalcond[5]=(new_r01+((cj3*x446))+((sj3*x441)));
evalcond[6]=(x450+x451+(((-1.0)*cj4*x449)));
evalcond[7]=(((sj3*x442))+(((-1.0)*cj4*x452))+new_r00);
evalcond[8]=(((sj3*x446))+new_r11+(((-1.0)*x452)));
evalcond[9]=((((-1.0)*cj4*x441*x447))+(((-1.0)*cj3*x443))+new_r10);
evalcond[10]=((((-1.0)*x451*x453))+((new_r20*sj4))+x441+(((-1.0)*x450*x453)));
evalcond[11]=((((-1.0)*x445*x453))+(((-1.0)*x444*x453))+x448+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x456=IKPowWithIntegerCheck(sj4,-1);
if(!x456.valid){
continue;
}
IkReal x454=x456.value;
IkReal x455=((1.0)*new_r20);
CheckValue<IkReal> x457=IKPowWithIntegerCheck(sj3,-1);
if(!x457.valid){
continue;
}
if( IKabs((x454*(x457.value)*(((((-1.0)*cj3*cj4*x455))+(((-1.0)*(1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x454*x455)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x454*(x457.value)*(((((-1.0)*cj3*cj4*x455))+(((-1.0)*(1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*x454*x455))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x454*(x457.value)*(((((-1.0)*cj3*cj4*x455))+(((-1.0)*(1.0)*new_r00*sj4))))), ((-1.0)*x454*x455));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x458=IKcos(j5);
IkReal x459=IKsin(j5);
IkReal x460=((1.0)*x459);
IkReal x461=(cj3*new_r01);
IkReal x462=(new_r11*sj3);
IkReal x463=(cj4*x459);
IkReal x464=((1.0)*sj3);
IkReal x465=((-1.0)*x460);
IkReal x466=((1.0)*x458);
IkReal x467=(cj3*new_r00);
IkReal x468=(new_r10*sj3);
IkReal x469=(cj3*x466);
IkReal x470=((1.0)*cj4);
evalcond[0]=(((sj4*x458))+new_r20);
evalcond[1]=((((-1.0)*sj4*x460))+new_r21);
evalcond[2]=(x462+x461+x463);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x464))+x465);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x466))+(((-1.0)*new_r01*x464)));
evalcond[5]=(((sj3*x458))+new_r01+((cj3*x463)));
evalcond[6]=((((-1.0)*cj4*x466))+x467+x468);
evalcond[7]=(((sj3*x459))+(((-1.0)*cj4*x469))+new_r00);
evalcond[8]=((((-1.0)*x469))+new_r11+((sj3*x463)));
evalcond[9]=((((-1.0)*cj4*x458*x464))+(((-1.0)*cj3*x460))+new_r10);
evalcond[10]=((((-1.0)*x467*x470))+(((-1.0)*x468*x470))+((new_r20*sj4))+x458);
evalcond[11]=((((-1.0)*x461*x470))+(((-1.0)*x462*x470))+((new_r21*sj4))+x465);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x471=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x471.valid){
continue;
}
CheckValue<IkReal> x472 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x472.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x471.value)))+(x472.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x473=IKcos(j5);
IkReal x474=IKsin(j5);
IkReal x475=((1.0)*x474);
IkReal x476=(cj3*new_r01);
IkReal x477=(new_r11*sj3);
IkReal x478=(cj4*x474);
IkReal x479=((1.0)*sj3);
IkReal x480=((-1.0)*x475);
IkReal x481=((1.0)*x473);
IkReal x482=(cj3*new_r00);
IkReal x483=(new_r10*sj3);
IkReal x484=(cj3*x481);
IkReal x485=((1.0)*cj4);
evalcond[0]=(((sj4*x473))+new_r20);
evalcond[1]=((((-1.0)*sj4*x475))+new_r21);
evalcond[2]=(x478+x476+x477);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x479))+x480);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x481))+(((-1.0)*new_r01*x479)));
evalcond[5]=(((sj3*x473))+new_r01+((cj3*x478)));
evalcond[6]=(x482+x483+(((-1.0)*cj4*x481)));
evalcond[7]=((((-1.0)*cj4*x484))+((sj3*x474))+new_r00);
evalcond[8]=(((sj3*x478))+new_r11+(((-1.0)*x484)));
evalcond[9]=((((-1.0)*cj4*x473*x479))+new_r10+(((-1.0)*cj3*x475)));
evalcond[10]=(x473+(((-1.0)*x482*x485))+(((-1.0)*x483*x485))+((new_r20*sj4)));
evalcond[11]=((((-1.0)*x476*x485))+(((-1.0)*x477*x485))+x480+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - kuka_kr60_ha (820956fbac1fc40122d58d4d93f226b0)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
